
final_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000188  00800060  000014b4  00001548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a9  008001e8  008001e8  000016d0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a3  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086c  00000000  00000000  00002ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fe  00000000  00000000  0000354f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000853  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d23  00000000  00000000  00004907  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000562a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 04 	call	0x8a8	; 0x8a8 <main>
      8a:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:

bool ESP8266_Close()
{
	return SendATandExpectResponse("AT+CIPCLOSE=1", "\r\nOK\r\n");
	//AT+CIPCLOSE At command closes the TCP or UDP connection
}
      92:	59 9a       	sbi	0x0b, 1	; 11
      94:	2a b1       	in	r18, 0x0a	; 10
      96:	28 69       	ori	r18, 0x98	; 152
      98:	2a b9       	out	0x0a, r18	; 10
      9a:	20 b5       	in	r18, 0x20	; 32
      9c:	26 68       	ori	r18, 0x86	; 134
      9e:	20 bd       	out	0x20, r18	; 32
      a0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
      a4:	20 e0       	ldi	r18, 0x00	; 0
      a6:	30 e0       	ldi	r19, 0x00	; 0
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	51 e4       	ldi	r21, 0x41	; 65
      ac:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3>
      b0:	9b 01       	movw	r18, r22
      b2:	ac 01       	movw	r20, r24
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	7b e1       	ldi	r23, 0x1B	; 27
      b8:	87 e3       	ldi	r24, 0x37	; 55
      ba:	9b e4       	ldi	r25, 0x4B	; 75
      bc:	0e 94 3b 05 	call	0xa76	; 0xa76 <__divsf3>
      c0:	20 e0       	ldi	r18, 0x00	; 0
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	40 e8       	ldi	r20, 0x80	; 128
      c6:	5f e3       	ldi	r21, 0x3F	; 63
      c8:	0e 94 ce 04 	call	0x99c	; 0x99c <__subsf3>
      cc:	0e 94 de 06 	call	0xdbc	; 0xdbc <round>
      d0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fixsfsi>
      d4:	69 b9       	out	0x09, r22	; 9
      d6:	70 bd       	out	0x20, r23	; 32
      d8:	08 95       	ret

000000da <USART_TxChar>:
      da:	8c b9       	out	0x0c, r24	; 12
      dc:	5d 9b       	sbis	0x0b, 5	; 11
      de:	fe cf       	rjmp	.-4      	; 0xdc <USART_TxChar+0x2>
      e0:	08 95       	ret

000000e2 <USART_SendString>:
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
      e8:	88 81       	ld	r24, Y
      ea:	88 23       	and	r24, r24
      ec:	31 f0       	breq	.+12     	; 0xfa <USART_SendString+0x18>
      ee:	21 96       	adiw	r28, 0x01	; 1
      f0:	0e 94 6d 00 	call	0xda	; 0xda <USART_TxChar>
      f4:	89 91       	ld	r24, Y+
      f6:	81 11       	cpse	r24, r1
      f8:	fb cf       	rjmp	.-10     	; 0xf0 <USART_SendString+0xe>
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	08 95       	ret

00000100 <Read_Response>:
     100:	2f 92       	push	r2
     102:	3f 92       	push	r3
     104:	4f 92       	push	r4
     106:	5f 92       	push	r5
     108:	6f 92       	push	r6
     10a:	7f 92       	push	r7
     10c:	8f 92       	push	r8
     10e:	9f 92       	push	r9
     110:	af 92       	push	r10
     112:	bf 92       	push	r11
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
     128:	2c 97       	sbiw	r28, 0x0c	; 12
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	de bf       	out	0x3e, r29	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	cd bf       	out	0x3d, r28	; 61
     134:	9e 83       	std	Y+6, r25	; 0x06
     136:	8d 83       	std	Y+5, r24	; 0x05
     138:	2d b7       	in	r18, 0x3d	; 61
     13a:	3e b7       	in	r19, 0x3e	; 62
     13c:	3c 87       	std	Y+12, r19	; 0x0c
     13e:	2b 87       	std	Y+11, r18	; 0x0b
     140:	fc 01       	movw	r30, r24
     142:	01 90       	ld	r0, Z+
     144:	00 20       	and	r0, r0
     146:	e9 f7       	brne	.-6      	; 0x142 <Read_Response+0x42>
     148:	31 97       	sbiw	r30, 0x01	; 1
     14a:	5f 01       	movw	r10, r30
     14c:	a8 1a       	sub	r10, r24
     14e:	b9 0a       	sbc	r11, r25
     150:	bb 24       	eor	r11, r11
     152:	a5 01       	movw	r20, r10
     154:	41 50       	subi	r20, 0x01	; 1
     156:	51 09       	sbc	r21, r1
     158:	58 87       	std	Y+8, r21	; 0x08
     15a:	4f 83       	std	Y+7, r20	; 0x07
     15c:	8d b7       	in	r24, 0x3d	; 61
     15e:	9e b7       	in	r25, 0x3e	; 62
     160:	8a 19       	sub	r24, r10
     162:	9b 09       	sbc	r25, r11
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	9e bf       	out	0x3e, r25	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	8d bf       	out	0x3d, r24	; 61
     16e:	ad b7       	in	r26, 0x3d	; 61
     170:	be b7       	in	r27, 0x3e	; 62
     172:	11 96       	adiw	r26, 0x01	; 1
     174:	4d 01       	movw	r8, r26
     176:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <__data_end>
     17a:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <__data_end+0x1>
     17e:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <__data_end+0x2>
     182:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <__data_end+0x3>
     186:	80 3f       	cpi	r24, 0xF0	; 240
     188:	98 4d       	sbci	r25, 0xD8	; 216
     18a:	af 4f       	sbci	r26, 0xFF	; 255
     18c:	bf 4f       	sbci	r27, 0xFF	; 255
     18e:	61 f4       	brne	.+24     	; 0x1a8 <Read_Response+0xa8>
     190:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <__data_end>
     194:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <__data_end+0x1>
     198:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__data_end+0x2>
     19c:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <__data_end+0x3>
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <Response_Status>
     1a6:	9b c0       	rjmp	.+310    	; 0x2de <Read_Response+0x1de>
     1a8:	19 82       	std	Y+1, r1	; 0x01
     1aa:	1a 82       	std	Y+2, r1	; 0x02
     1ac:	1b 82       	std	Y+3, r1	; 0x03
     1ae:	1c 82       	std	Y+4, r1	; 0x04
     1b0:	2f 80       	ldd	r2, Y+7	; 0x07
     1b2:	38 84       	ldd	r3, Y+8	; 0x08
     1b4:	28 0c       	add	r2, r8
     1b6:	39 1c       	adc	r3, r9
     1b8:	94 01       	movw	r18, r8
     1ba:	2f 5f       	subi	r18, 0xFF	; 255
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	3a 87       	std	Y+10, r19	; 0x0a
     1c0:	29 87       	std	Y+9, r18	; 0x09
     1c2:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <Response_Status>
     1c6:	84 30       	cpi	r24, 0x04	; 4
     1c8:	11 f4       	brne	.+4      	; 0x1ce <Read_Response+0xce>
     1ca:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <Response_Status>
     1ce:	e0 ef       	ldi	r30, 0xF0	; 240
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	01 90       	ld	r0, Z+
     1d4:	00 20       	and	r0, r0
     1d6:	e9 f7       	brne	.-6      	; 0x1d2 <Read_Response+0xd2>
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	cf 01       	movw	r24, r30
     1dc:	80 5f       	subi	r24, 0xF0	; 240
     1de:	91 40       	sbci	r25, 0x01	; 1
     1e0:	6c 01       	movw	r12, r24
     1e2:	e1 2c       	mov	r14, r1
     1e4:	f1 2c       	mov	r15, r1
     1e6:	c1 14       	cp	r12, r1
     1e8:	d1 04       	cpc	r13, r1
     1ea:	e1 04       	cpc	r14, r1
     1ec:	f1 04       	cpc	r15, r1
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <Read_Response+0xf2>
     1f0:	51 c0       	rjmp	.+162    	; 0x294 <Read_Response+0x194>
     1f2:	89 ef       	ldi	r24, 0xF9	; 249
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Read_Response+0xf6>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <Read_Response+0xfc>
     1fc:	00 00       	nop
     1fe:	29 81       	ldd	r18, Y+1	; 0x01
     200:	3a 81       	ldd	r19, Y+2	; 0x02
     202:	4b 81       	ldd	r20, Y+3	; 0x03
     204:	5c 81       	ldd	r21, Y+4	; 0x04
     206:	2f 5f       	subi	r18, 0xFF	; 255
     208:	3f 4f       	sbci	r19, 0xFF	; 255
     20a:	4f 4f       	sbci	r20, 0xFF	; 255
     20c:	5f 4f       	sbci	r21, 0xFF	; 255
     20e:	29 83       	std	Y+1, r18	; 0x01
     210:	3a 83       	std	Y+2, r19	; 0x02
     212:	4b 83       	std	Y+3, r20	; 0x03
     214:	5c 83       	std	Y+4, r21	; 0x04
     216:	e0 ef       	ldi	r30, 0xF0	; 240
     218:	f1 e0       	ldi	r31, 0x01	; 1
     21a:	01 90       	ld	r0, Z+
     21c:	00 20       	and	r0, r0
     21e:	e9 f7       	brne	.-6      	; 0x21a <Read_Response+0x11a>
     220:	31 97       	sbiw	r30, 0x01	; 1
     222:	cf 01       	movw	r24, r30
     224:	80 5f       	subi	r24, 0xF0	; 240
     226:	91 40       	sbci	r25, 0x01	; 1
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	c8 16       	cp	r12, r24
     22e:	d9 06       	cpc	r13, r25
     230:	ea 06       	cpc	r14, r26
     232:	fb 06       	cpc	r15, r27
     234:	79 f5       	brne	.+94     	; 0x294 <Read_Response+0x194>
     236:	00 ef       	ldi	r16, 0xF0	; 240
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	41 2c       	mov	r4, r1
     23c:	51 2c       	mov	r5, r1
     23e:	32 01       	movw	r6, r4
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 85       	ldd	r22, Y+9	; 0x09
     246:	7a 85       	ldd	r23, Y+10	; 0x0a
     248:	c4 01       	movw	r24, r8
     24a:	0e 94 34 07 	call	0xe68	; 0xe68 <memmove>
     24e:	d8 01       	movw	r26, r16
     250:	8d 91       	ld	r24, X+
     252:	8d 01       	movw	r16, r26
     254:	f1 01       	movw	r30, r2
     256:	80 83       	st	Z, r24
     258:	a5 01       	movw	r20, r10
     25a:	6d 81       	ldd	r22, Y+5	; 0x05
     25c:	7e 81       	ldd	r23, Y+6	; 0x06
     25e:	c4 01       	movw	r24, r8
     260:	0e 94 46 07 	call	0xe8c	; 0xe8c <strncmp>
     264:	89 2b       	or	r24, r25
     266:	61 f4       	brne	.+24     	; 0x280 <Read_Response+0x180>
     268:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <__data_end>
     26c:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <__data_end+0x1>
     270:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__data_end+0x2>
     274:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <__data_end+0x3>
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <Response_Status>
     27e:	2f c0       	rjmp	.+94     	; 0x2de <Read_Response+0x1de>
     280:	ff ef       	ldi	r31, 0xFF	; 255
     282:	4f 1a       	sub	r4, r31
     284:	5f 0a       	sbc	r5, r31
     286:	6f 0a       	sbc	r6, r31
     288:	7f 0a       	sbc	r7, r31
     28a:	4c 14       	cp	r4, r12
     28c:	5d 04       	cpc	r5, r13
     28e:	6e 04       	cpc	r6, r14
     290:	7f 04       	cpc	r7, r15
     292:	b1 f6       	brne	.-84     	; 0x240 <Read_Response+0x140>
     294:	89 ef       	ldi	r24, 0xF9	; 249
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <Read_Response+0x198>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <Read_Response+0x19e>
     29e:	00 00       	nop
     2a0:	29 81       	ldd	r18, Y+1	; 0x01
     2a2:	3a 81       	ldd	r19, Y+2	; 0x02
     2a4:	4b 81       	ldd	r20, Y+3	; 0x03
     2a6:	5c 81       	ldd	r21, Y+4	; 0x04
     2a8:	2f 5f       	subi	r18, 0xFF	; 255
     2aa:	3f 4f       	sbci	r19, 0xFF	; 255
     2ac:	4f 4f       	sbci	r20, 0xFF	; 255
     2ae:	5f 4f       	sbci	r21, 0xFF	; 255
     2b0:	29 83       	std	Y+1, r18	; 0x01
     2b2:	3a 83       	std	Y+2, r19	; 0x02
     2b4:	4b 83       	std	Y+3, r20	; 0x03
     2b6:	5c 83       	std	Y+4, r21	; 0x04
     2b8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <__data_end>
     2bc:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <__data_end+0x1>
     2c0:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <__data_end+0x2>
     2c4:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <__data_end+0x3>
     2c8:	80 5f       	subi	r24, 0xF0	; 240
     2ca:	98 4d       	sbci	r25, 0xD8	; 216
     2cc:	af 4f       	sbci	r26, 0xFF	; 255
     2ce:	bf 4f       	sbci	r27, 0xFF	; 255
     2d0:	28 17       	cp	r18, r24
     2d2:	39 07       	cpc	r19, r25
     2d4:	4a 07       	cpc	r20, r26
     2d6:	5b 07       	cpc	r21, r27
     2d8:	08 f4       	brcc	.+2      	; 0x2dc <Read_Response+0x1dc>
     2da:	73 cf       	rjmp	.-282    	; 0x1c2 <Read_Response+0xc2>
     2dc:	59 cf       	rjmp	.-334    	; 0x190 <Read_Response+0x90>
     2de:	4b 85       	ldd	r20, Y+11	; 0x0b
     2e0:	5c 85       	ldd	r21, Y+12	; 0x0c
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	5e bf       	out	0x3e, r21	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	4d bf       	out	0x3d, r20	; 61
     2ec:	2c 96       	adiw	r28, 0x0c	; 12
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	bf 90       	pop	r11
     30a:	af 90       	pop	r10
     30c:	9f 90       	pop	r9
     30e:	8f 90       	pop	r8
     310:	7f 90       	pop	r7
     312:	6f 90       	pop	r6
     314:	5f 90       	pop	r5
     316:	4f 90       	pop	r4
     318:	3f 90       	pop	r3
     31a:	2f 90       	pop	r2
     31c:	08 95       	ret

0000031e <ESP8266_Clear>:
     31e:	80 ea       	ldi	r24, 0xA0	; 160
     320:	e0 ef       	ldi	r30, 0xF0	; 240
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	df 01       	movw	r26, r30
     326:	1d 92       	st	X+, r1
     328:	8a 95       	dec	r24
     32a:	e9 f7       	brne	.-6      	; 0x326 <ESP8266_Clear+0x8>
     32c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <Counter+0x1>
     330:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <Counter>
     334:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <pointer+0x1>
     338:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <pointer>
     33c:	08 95       	ret

0000033e <Start_Read_Response>:
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ec 01       	movw	r28, r24
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <Response_Status>
     34a:	ce 01       	movw	r24, r28
     34c:	0e 94 80 00 	call	0x100	; 0x100 <Read_Response>
     350:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <Response_Status>
     354:	88 23       	and	r24, r24
     356:	c9 f3       	breq	.-14     	; 0x34a <Start_Read_Response+0xc>
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <WaitForExpectedResponse>:
     35e:	0e 94 9f 01 	call	0x33e	; 0x33e <Start_Read_Response>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <Response_Status>
     368:	92 30       	cpi	r25, 0x02	; 2
     36a:	09 f4       	brne	.+2      	; 0x36e <WaitForExpectedResponse+0x10>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	08 95       	ret

00000370 <SendATandExpectResponse>:
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	8c 01       	movw	r16, r24
     37a:	eb 01       	movw	r28, r22
     37c:	0e 94 8f 01 	call	0x31e	; 0x31e <ESP8266_Clear>
     380:	c8 01       	movw	r24, r16
     382:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_SendString>
     386:	88 ec       	ldi	r24, 0xC8	; 200
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_SendString>
     38e:	ce 01       	movw	r24, r28
     390:	0e 94 af 01 	call	0x35e	; 0x35e <WaitForExpectedResponse>
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <ESP8266_ApplicationMode>:
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	64 97       	sbiw	r28, 0x14	; 20
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	94 e1       	ldi	r25, 0x14	; 20
     3be:	f8 01       	movw	r30, r16
     3c0:	11 92       	st	Z+, r1
     3c2:	9a 95       	dec	r25
     3c4:	e9 f7       	brne	.-6      	; 0x3c0 <ESP8266_ApplicationMode+0x22>
     3c6:	1f 92       	push	r1
     3c8:	8f 93       	push	r24
     3ca:	87 e6       	ldi	r24, 0x67	; 103
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	9f 93       	push	r25
     3d0:	8f 93       	push	r24
     3d2:	1f 93       	push	r17
     3d4:	0f 93       	push	r16
     3d6:	0e 94 6e 07 	call	0xedc	; 0xedc <sprintf>
     3da:	1c 8a       	std	Y+20, r1	; 0x14
     3dc:	60 e6       	ldi	r22, 0x60	; 96
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	c8 01       	movw	r24, r16
     3e2:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	64 96       	adiw	r28, 0x14	; 20
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <ESP8266_ConnectionMode>:
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	64 97       	sbiw	r28, 0x14	; 20
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	8e 01       	movw	r16, r28
     422:	0f 5f       	subi	r16, 0xFF	; 255
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	94 e1       	ldi	r25, 0x14	; 20
     428:	f8 01       	movw	r30, r16
     42a:	11 92       	st	Z+, r1
     42c:	9a 95       	dec	r25
     42e:	e9 f7       	brne	.-6      	; 0x42a <ESP8266_ConnectionMode+0x22>
     430:	1f 92       	push	r1
     432:	8f 93       	push	r24
     434:	85 e7       	ldi	r24, 0x75	; 117
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	1f 93       	push	r17
     43e:	0f 93       	push	r16
     440:	0e 94 6e 07 	call	0xedc	; 0xedc <sprintf>
     444:	1c 8a       	std	Y+20, r1	; 0x14
     446:	60 e6       	ldi	r22, 0x60	; 96
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	c8 01       	movw	r24, r16
     44c:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	64 96       	adiw	r28, 0x14	; 20
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	08 95       	ret

00000472 <ESP8266_Begin>:
     472:	cf 93       	push	r28
     474:	c5 e0       	ldi	r28, 0x05	; 5
     476:	60 e6       	ldi	r22, 0x60	; 96
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	82 e8       	ldi	r24, 0x82	; 130
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     482:	81 11       	cpse	r24, r1
     484:	0a c0       	rjmp	.+20     	; 0x49a <ESP8266_Begin+0x28>
     486:	60 e6       	ldi	r22, 0x60	; 96
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	87 e8       	ldi	r24, 0x87	; 135
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     492:	81 11       	cpse	r24, r1
     494:	02 c0       	rjmp	.+4      	; 0x49a <ESP8266_Begin+0x28>
     496:	c1 50       	subi	r28, 0x01	; 1
     498:	71 f7       	brne	.-36     	; 0x476 <ESP8266_Begin+0x4>
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <ESP8266_WIFIMode>:

bool ESP8266_WIFIMode(uint8_t _mode)
{
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	64 97       	sbiw	r28, 0x14	; 20
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     4b6:	8e 01       	movw	r16, r28
     4b8:	0f 5f       	subi	r16, 0xFF	; 255
     4ba:	1f 4f       	sbci	r17, 0xFF	; 255
     4bc:	94 e1       	ldi	r25, 0x14	; 20
     4be:	f8 01       	movw	r30, r16
     4c0:	11 92       	st	Z+, r1
     4c2:	9a 95       	dec	r25
     4c4:	e9 f7       	brne	.-6      	; 0x4c0 <ESP8266_WIFIMode+0x22>
	sprintf(_atCommand, "AT+CWMODE=%d", _mode);//station or access point or both 
     4c6:	1f 92       	push	r1
     4c8:	8f 93       	push	r24
     4ca:	88 e9       	ldi	r24, 0x98	; 152
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	1f 93       	push	r17
     4d4:	0f 93       	push	r16
     4d6:	0e 94 6e 07 	call	0xedc	; 0xedc <sprintf>
	_atCommand[19] = 0;
     4da:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
     4dc:	60 e6       	ldi	r22, 0x60	; 96
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	c8 01       	movw	r24, r16
     4e2:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
}
     4f2:	64 96       	adiw	r28, 0x14	; 20
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <ESP8266_JoinAccessPoint>:

uint8_t ESP8266_JoinAccessPoint(char* _SSID, char* _PASSWORD)
{
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	ec 97       	sbiw	r28, 0x3c	; 60
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     520:	8e 01       	movw	r16, r28
     522:	0f 5f       	subi	r16, 0xFF	; 255
     524:	1f 4f       	sbci	r17, 0xFF	; 255
     526:	2c e3       	ldi	r18, 0x3C	; 60
     528:	f8 01       	movw	r30, r16
     52a:	11 92       	st	Z+, r1
     52c:	2a 95       	dec	r18
     52e:	e9 f7       	brne	.-6      	; 0x52a <ESP8266_JoinAccessPoint+0x22>
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD); //connects to an access point 
     530:	7f 93       	push	r23
     532:	6f 93       	push	r22
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	85 ea       	ldi	r24, 0xA5	; 165
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	9f 93       	push	r25
     53e:	8f 93       	push	r24
     540:	1f 93       	push	r17
     542:	0f 93       	push	r16
     544:	0e 94 6e 07 	call	0xedc	; 0xedc <sprintf>
	_atCommand[59] = 0;
     548:	1c ae       	std	Y+60, r1	; 0x3c
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
     54a:	68 eb       	ldi	r22, 0xB8	; 184
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	c8 01       	movw	r24, r16
     550:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	81 11       	cpse	r24, r1
     560:	22 c0       	rjmp	.+68     	; 0x5a6 <ESP8266_JoinAccessPoint+0x9e>
	return ESP8266_WIFI_CONNECTED;
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1")) //search in RESPONSE_BUFFER whether we have  "+CWJAP:1" or not 
     562:	6b ec       	ldi	r22, 0xCB	; 203
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 ef       	ldi	r24, 0xF0	; 240
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 54 07 	call	0xea8	; 0xea8 <strstr>
     56e:	89 2b       	or	r24, r25
     570:	e1 f4       	brne	.+56     	; 0x5aa <ESP8266_JoinAccessPoint+0xa2>
		return ESP8266_CONNECTION_TIMEOUT;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
     572:	64 ed       	ldi	r22, 0xD4	; 212
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	80 ef       	ldi	r24, 0xF0	; 240
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 54 07 	call	0xea8	; 0xea8 <strstr>
     57e:	89 2b       	or	r24, r25
     580:	b1 f4       	brne	.+44     	; 0x5ae <ESP8266_JoinAccessPoint+0xa6>
		return ESP8266_WRONG_PASSWORD;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
     582:	6d ed       	ldi	r22, 0xDD	; 221
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 ef       	ldi	r24, 0xF0	; 240
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 54 07 	call	0xea8	; 0xea8 <strstr>
     58e:	89 2b       	or	r24, r25
     590:	81 f4       	brne	.+32     	; 0x5b2 <ESP8266_JoinAccessPoint+0xaa>
		return ESP8266_NOT_FOUND_TARGET_AP;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
     592:	66 ee       	ldi	r22, 0xE6	; 230
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 ef       	ldi	r24, 0xF0	; 240
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 54 07 	call	0xea8	; 0xea8 <strstr>
     59e:	89 2b       	or	r24, r25
     5a0:	51 f4       	brne	.+20     	; 0x5b6 <ESP8266_JoinAccessPoint+0xae>
		return ESP8266_CONNECTION_FAILED;
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
     5a2:	85 e0       	ldi	r24, 0x05	; 5
     5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
	char _atCommand[60];
	memset(_atCommand, 0, 60);
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD); //connects to an access point 
	_atCommand[59] = 0;
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
	return ESP8266_WIFI_CONNECTED;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1")) //search in RESPONSE_BUFFER whether we have  "+CWJAP:1" or not 
		return ESP8266_CONNECTION_TIMEOUT;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
		return ESP8266_WRONG_PASSWORD;
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
		return ESP8266_NOT_FOUND_TARGET_AP;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
		return ESP8266_CONNECTION_FAILED;
     5b6:	84 e0       	ldi	r24, 0x04	; 4
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
	}
}
     5b8:	ec 96       	adiw	r28, 0x3c	; 60
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <ESP8266_connected>:

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n"); //AT+CIPSTATUS AT comamnd returns the current connection status. 
     5ce:	60 e6       	ldi	r22, 0x60	; 96
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	8f ee       	ldi	r24, 0xEF	; 239
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
	//This command returns the applicable server status, client status, conenction number (for multi-ip) and GPRS bearer info
	
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
     5da:	6c ef       	ldi	r22, 0xFC	; 252
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	80 ef       	ldi	r24, 0xF0	; 240
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 54 07 	call	0xea8	; 0xea8 <strstr>
     5e6:	89 2b       	or	r24, r25
     5e8:	d1 f4       	brne	.+52     	; 0x61e <ESP8266_connected+0x50>
	return ESP8266_CONNECTED_TO_AP; //esp connected to access point 
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
     5ea:	65 e0       	ldi	r22, 0x05	; 5
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	80 ef       	ldi	r24, 0xF0	; 240
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 54 07 	call	0xea8	; 0xea8 <strstr>
     5f6:	89 2b       	or	r24, r25
     5f8:	a1 f4       	brne	.+40     	; 0x622 <ESP8266_connected+0x54>
	return ESP8266_CREATED_TRANSMISSION;
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
     5fa:	6e e0       	ldi	r22, 0x0E	; 14
     5fc:	71 e0       	ldi	r23, 0x01	; 1
     5fe:	80 ef       	ldi	r24, 0xF0	; 240
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 54 07 	call	0xea8	; 0xea8 <strstr>
     606:	89 2b       	or	r24, r25
     608:	71 f4       	brne	.+28     	; 0x626 <ESP8266_connected+0x58>
	return ESP8266_TRANSMISSION_DISCONNECTED;
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
     60a:	67 e1       	ldi	r22, 0x17	; 23
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	80 ef       	ldi	r24, 0xF0	; 240
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 54 07 	call	0xea8	; 0xea8 <strstr>
     616:	89 2b       	or	r24, r25
     618:	41 f4       	brne	.+16     	; 0x62a <ESP8266_connected+0x5c>
	return ESP8266_NOT_CONNECTED_TO_AP;
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	08 95       	ret
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n"); //AT+CIPSTATUS AT comamnd returns the current connection status. 
	//This command returns the applicable server status, client status, conenction number (for multi-ip) and GPRS bearer info
	
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
	return ESP8266_CONNECTED_TO_AP; //esp connected to access point 
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
	return ESP8266_CREATED_TRANSMISSION;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
	return ESP8266_TRANSMISSION_DISCONNECTED;
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
	return ESP8266_NOT_CONNECTED_TO_AP;
     62a:	83 e0       	ldi	r24, 0x03	; 3
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
}
     62c:	08 95       	ret

0000062e <ESP8266_Start>:
//
uint8_t ESP8266_Start(uint8_t _ConnectionNumber, char* Domain, char* Port)
{
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	ec 97       	sbiw	r28, 0x3c	; 60
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	d8 2e       	mov	r13, r24
     64e:	16 2f       	mov	r17, r22
     650:	07 2f       	mov	r16, r23
     652:	f4 2e       	mov	r15, r20
     654:	e5 2e       	mov	r14, r21
	bool _startResponse;
	char _atCommand[60];
	memset(_atCommand, 0, 60); //fill first 60 char with zero /0 
     656:	fe 01       	movw	r30, r28
     658:	31 96       	adiw	r30, 0x01	; 1
     65a:	8c e3       	ldi	r24, 0x3C	; 60
     65c:	df 01       	movw	r26, r30
     65e:	1d 92       	st	X+, r1
     660:	8a 95       	dec	r24
     662:	e9 f7       	brne	.-6      	; 0x65e <ESP8266_Start+0x30>
	_atCommand[59] = 0;

	if(SendATandExpectResponse("AT+CIPMUX?", "CIPMUX:0"))
     664:	60 e2       	ldi	r22, 0x20	; 32
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	89 e2       	ldi	r24, 0x29	; 41
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     670:	88 23       	and	r24, r24
     672:	a1 f0       	breq	.+40     	; 0x69c <ESP8266_Start+0x6e>
	sprintf(_atCommand, "AT+CIPSTART=\"TCP\",\"%s\",%s", Domain, Port); // single client
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	84 e3       	ldi	r24, 0x34	; 52
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 6e 07 	call	0xedc	; 0xedc <sprintf>
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	15 c0       	rjmp	.+42     	; 0x6c6 <ESP8266_Start+0x98>
	else
	sprintf(_atCommand, "AT+CIPSTART=\"%d\",\"TCP\",\"%s\",%s", _ConnectionNumber, Domain, Port);
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	1f 92       	push	r1
     6a6:	df 92       	push	r13
     6a8:	8e e4       	ldi	r24, 0x4E	; 78
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	ce 01       	movw	r24, r28
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	0e 94 6e 07 	call	0xedc	; 0xedc <sprintf>
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
     6c6:	6d e6       	ldi	r22, 0x6D	; 109
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	ce 01       	movw	r24, r28
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
	if(!_startResponse)
     6d2:	81 11       	cpse	r24, r1
     6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <ESP8266_Start+0xb4>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     6d6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <Response_Status>
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <ESP8266_Start+0xb8>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <ESP8266_Start+0xba>
	}
	return ESP8266_RESPONSE_FINISHED;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <ESP8266_Start+0xba>

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
	if(!_startResponse)
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
     6e6:	82 e0       	ldi	r24, 0x02	; 2
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
}
     6e8:	ec 96       	adiw	r28, 0x3c	; 60
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	08 95       	ret

00000704 <ESP8266_Send>:

////////////////////////////////////////////////////
uint8_t ESP8266_Send(char* Data)
{
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	64 97       	sbiw	r28, 0x14	; 20
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	8c 01       	movw	r16, r24
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	7c 01       	movw	r14, r24
     728:	84 e1       	ldi	r24, 0x14	; 20
     72a:	f7 01       	movw	r30, r14
     72c:	11 92       	st	Z+, r1
     72e:	8a 95       	dec	r24
     730:	e9 f7       	brne	.-6      	; 0x72c <ESP8266_Send+0x28>
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(Data)+2)); //AT+CIPSEND AT command is used to send the data over the TCP or UDP connection
     732:	f8 01       	movw	r30, r16
     734:	01 90       	ld	r0, Z+
     736:	00 20       	and	r0, r0
     738:	e9 f7       	brne	.-6      	; 0x734 <ESP8266_Send+0x30>
     73a:	cf 01       	movw	r24, r30
     73c:	80 1b       	sub	r24, r16
     73e:	91 0b       	sbc	r25, r17
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	87 e7       	ldi	r24, 0x77	; 119
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	ff 92       	push	r15
     750:	ef 92       	push	r14
     752:	0e 94 6e 07 	call	0xedc	; 0xedc <sprintf>
	_atCommand[19] = 0;
     756:	1c 8a       	std	Y+20, r1	; 0x14
	
	
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
     758:	65 e8       	ldi	r22, 0x85	; 133
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	c7 01       	movw	r24, r14
     75e:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n")) //if we have error 
     762:	6d e8       	ldi	r22, 0x8D	; 141
     764:	71 e0       	ldi	r23, 0x01	; 1
     766:	c8 01       	movw	r24, r16
     768:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	81 11       	cpse	r24, r1
     77a:	06 c0       	rjmp	.+12     	; 0x788 <ESP8266_Send+0x84>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     77c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <Response_Status>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	21 f0       	breq	.+8      	; 0x78c <ESP8266_Send+0x88>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     784:	85 e0       	ldi	r24, 0x05	; 5
     786:	03 c0       	rjmp	.+6      	; 0x78e <ESP8266_Send+0x8a>
	}
	return ESP8266_RESPONSE_FINISHED; //finished and we didn't face any error 
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	01 c0       	rjmp	.+2      	; 0x78e <ESP8266_Send+0x8a>
	
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n")) //if we have error 
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
     78c:	82 e0       	ldi	r24, 0x02	; 2
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED; //finished and we didn't face any error 
}
     78e:	64 96       	adiw	r28, 0x14	; 20
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	08 95       	ret

000007a8 <ESP8266_DataAvailable>:

int16_t ESP8266_DataAvailable()
{
	return (Counter - pointer);
     7a8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Counter>
     7ac:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <Counter+0x1>
     7b0:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <pointer>
     7b4:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <pointer+0x1>
}
     7b8:	82 1b       	sub	r24, r18
     7ba:	93 0b       	sbc	r25, r19
     7bc:	08 95       	ret

000007be <ESP8266_DataRead>:

uint8_t ESP8266_DataRead()
{
	if(pointer < Counter)
     7be:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <pointer>
     7c2:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <pointer+0x1>
     7c6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Counter>
     7ca:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <Counter+0x1>
     7ce:	28 17       	cp	r18, r24
     7d0:	39 07       	cpc	r19, r25
     7d2:	84 f4       	brge	.+32     	; 0x7f4 <ESP8266_DataRead+0x36>
	return RESPONSE_BUFFER[pointer++];
     7d4:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <pointer>
     7d8:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <pointer+0x1>
     7dc:	9c 01       	movw	r18, r24
     7de:	2f 5f       	subi	r18, 0xFF	; 255
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <pointer+0x1>
     7e6:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <pointer>
     7ea:	fc 01       	movw	r30, r24
     7ec:	e0 51       	subi	r30, 0x10	; 16
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	80 81       	ld	r24, Z
     7f2:	08 95       	ret
	else{
		ESP8266_Clear();
     7f4:	0e 94 8f 01 	call	0x31e	; 0x31e <ESP8266_Clear>
		return 0;
     7f8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     7fa:	08 95       	ret

000007fc <Read_Data>:

uint16_t Read_Data(char* _buffer)
{
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     804:	e7 ea       	ldi	r30, 0xA7	; 167
     806:	f1 e6       	ldi	r31, 0x61	; 97
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80e:	00 00       	nop
     810:	c8 2f       	mov	r28, r24
     812:	d9 2f       	mov	r29, r25
	uint16_t len = 0;
     814:	00 e0       	ldi	r16, 0x00	; 0
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	05 c0       	rjmp	.+10     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	_buffer[len++] = ESP8266_DataRead();
     81a:	0f 5f       	subi	r16, 0xFF	; 255
     81c:	1f 4f       	sbci	r17, 0xFF	; 255
     81e:	0e 94 df 03 	call	0x7be	; 0x7be <ESP8266_DataRead>
     822:	89 93       	st	Y+, r24

uint16_t Read_Data(char* _buffer)
{
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
     824:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ESP8266_DataAvailable>
     828:	18 16       	cp	r1, r24
     82a:	19 06       	cpc	r1, r25
     82c:	b4 f3       	brlt	.-20     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
	_buffer[len++] = ESP8266_DataRead();
	return len;
}
     82e:	c8 01       	movw	r24, r16
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	08 95       	ret

0000083a <__vector_13>:

ISR (USART_RXC_vect) //interrupt for received data 
{
     83a:	1f 92       	push	r1
     83c:	0f 92       	push	r0
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	2f 93       	push	r18
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	ef 93       	push	r30
     84c:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
     84e:	2f b7       	in	r18, 0x3f	; 63
	cli(); // clear interrupt :don't let any furthure interrupt
     850:	f8 94       	cli
	RESPONSE_BUFFER[Counter] = UDR; //any thing(any response) from esp8266 chip will be stored in RESPONSE_BUFFER[Counter]
     852:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <Counter>
     856:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <Counter+0x1>
     85a:	8c b1       	in	r24, 0x0c	; 12
     85c:	e0 51       	subi	r30, 0x10	; 16
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	80 83       	st	Z, r24
	Counter++;
     862:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Counter>
     866:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <Counter+0x1>
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Counter+0x1>
     870:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Counter>
	if(Counter == DEFAULT_BUFFER_SIZE){
     874:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Counter>
     878:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <Counter+0x1>
     87c:	80 3a       	cpi	r24, 0xA0	; 160
     87e:	91 05       	cpc	r25, r1
     880:	41 f4       	brne	.+16     	; 0x892 <__stack+0x33>
		Counter = 0; pointer = 0;
     882:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <Counter+0x1>
     886:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <Counter>
     88a:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <pointer+0x1>
     88e:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <pointer>
	}
	SREG = oldsrg;
     892:	2f bf       	out	0x3f, r18	; 63
}
     894:	ff 91       	pop	r31
     896:	ef 91       	pop	r30
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <main>:

int main(void)
{	
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	c8 5e       	subi	r28, 0xE8	; 232
     8b2:	d3 40       	sbci	r29, 0x03	; 3
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
	uint8_t Connect_Status;
	#ifdef SEND_DEMO
	uint8_t Sample = 0;
	#endif

	USART_Init(115200);						/* Initiate USART with 115200 baud rate */
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	72 ec       	ldi	r23, 0xC2	; 194
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
	sei();									/* Start global interrupt */
     8ca:	78 94       	sei

	while(!ESP8266_Begin());
     8cc:	0e 94 39 02 	call	0x472	; 0x472 <ESP8266_Begin>
     8d0:	88 23       	and	r24, r24
     8d2:	e1 f3       	breq	.-8      	; 0x8cc <main+0x24>
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);/* 3 = Both (AP and STA) */
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	0e 94 4f 02 	call	0x49e	; 0x49e <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);			/* 0 = Single; 1 = Multi */
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	0e 94 04 02 	call	0x408	; 0x408 <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);		/* 0 = Normal Mode; 1 = Transperant Mode */
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 cf 01 	call	0x39e	; 0x39e <ESP8266_ApplicationMode>
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP) //sends at command to esp to check the connection status of wifi 
     8e6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ESP8266_connected>
     8ea:	83 30       	cpi	r24, 0x03	; 3
     8ec:	31 f4       	brne	.+12     	; 0x8fa <main+0x52>
	ESP8266_JoinAccessPoint(SSID, PASSWORD);
     8ee:	69 e9       	ldi	r22, 0x99	; 153
     8f0:	71 e0       	ldi	r23, 0x01	; 1
     8f2:	86 ea       	ldi	r24, 0xA6	; 166
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	0e 94 84 02 	call	0x508	; 0x508 <ESP8266_JoinAccessPoint>
	ESP8266_Start(0, DOMAIN, PORT);
     8fa:	4b ea       	ldi	r20, 0xAB	; 171
     8fc:	51 e0       	ldi	r21, 0x01	; 1
     8fe:	6e ea       	ldi	r22, 0xAE	; 174
     900:	71 e0       	ldi	r23, 0x01	; 1
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 17 03 	call	0x62e	; 0x62e <ESP8266_Start>
		
		_delay_ms(15000);	/* Thingspeak server delay */
		#endif
		
		#ifdef RECEIVE_DEMO
		memset(_buffer, 0, 150);
     908:	0f 2e       	mov	r0, r31
     90a:	f6 e9       	ldi	r31, 0x96	; 150
     90c:	bf 2e       	mov	r11, r31
     90e:	f0 2d       	mov	r31, r0
     910:	8e 01       	movw	r16, r28
     912:	0f 5f       	subi	r16, 0xFF	; 255
     914:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(_buffer, "GET /channels/%s/feeds/last.txt", CHANNEL_ID);
     916:	0f 2e       	mov	r0, r31
     918:	f1 ec       	ldi	r31, 0xC1	; 193
     91a:	cf 2e       	mov	r12, r31
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	df 2e       	mov	r13, r31
     920:	f0 2d       	mov	r31, r0
     922:	0f 2e       	mov	r0, r31
     924:	f8 ec       	ldi	r31, 0xC8	; 200
     926:	ef 2e       	mov	r14, r31
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	ff 2e       	mov	r15, r31
     92c:	f0 2d       	mov	r31, r0
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP) //sends at command to esp to check the connection status of wifi 
	ESP8266_JoinAccessPoint(SSID, PASSWORD);
	ESP8266_Start(0, DOMAIN, PORT);
	while(1)
	{
		Connect_Status = ESP8266_connected();
     92e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ESP8266_connected>
		if(Connect_Status == ESP8266_NOT_CONNECTED_TO_AP)
     932:	83 30       	cpi	r24, 0x03	; 3
     934:	39 f4       	brne	.+14     	; 0x944 <main+0x9c>
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
     936:	69 e9       	ldi	r22, 0x99	; 153
     938:	71 e0       	ldi	r23, 0x01	; 1
     93a:	86 ea       	ldi	r24, 0xA6	; 166
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 84 02 	call	0x508	; 0x508 <ESP8266_JoinAccessPoint>
     942:	09 c0       	rjmp	.+18     	; 0x956 <main+0xae>
		if(Connect_Status == ESP8266_TRANSMISSION_DISCONNECTED)
     944:	82 30       	cpi	r24, 0x02	; 2
     946:	39 f4       	brne	.+14     	; 0x956 <main+0xae>
		ESP8266_Start(0, DOMAIN, PORT);
     948:	4b ea       	ldi	r20, 0xAB	; 171
     94a:	51 e0       	ldi	r21, 0x01	; 1
     94c:	6e ea       	ldi	r22, 0xAE	; 174
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 17 03 	call	0x62e	; 0x62e <ESP8266_Start>
		
		_delay_ms(15000);	/* Thingspeak server delay */
		#endif
		
		#ifdef RECEIVE_DEMO
		memset(_buffer, 0, 150);
     956:	f8 01       	movw	r30, r16
     958:	2b 2d       	mov	r18, r11
     95a:	11 92       	st	Z+, r1
     95c:	2a 95       	dec	r18
     95e:	e9 f7       	brne	.-6      	; 0x95a <main+0xb2>
		sprintf(_buffer, "GET /channels/%s/feeds/last.txt", CHANNEL_ID);
     960:	df 92       	push	r13
     962:	cf 92       	push	r12
     964:	ff 92       	push	r15
     966:	ef 92       	push	r14
     968:	1f 93       	push	r17
     96a:	0f 93       	push	r16
     96c:	0e 94 6e 07 	call	0xedc	; 0xedc <sprintf>
		ESP8266_Send(_buffer);
     970:	c8 01       	movw	r24, r16
     972:	0e 94 82 03 	call	0x704	; 0x704 <ESP8266_Send>
		Read_Data(_buffer);
     976:	c8 01       	movw	r24, r16
     978:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Read_Data>
     97c:	8f eb       	ldi	r24, 0xBF	; 191
     97e:	94 ed       	ldi	r25, 0xD4	; 212
     980:	e1 e0       	ldi	r30, 0x01	; 1
     982:	81 50       	subi	r24, 0x01	; 1
     984:	90 40       	sbci	r25, 0x00	; 0
     986:	e0 40       	sbci	r30, 0x00	; 0
     988:	e1 f7       	brne	.-8      	; 0x982 <main+0xda>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <main+0xe4>
     98c:	00 00       	nop
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	c9 cf       	rjmp	.-110    	; 0x92e <main+0x86>

0000099c <__subsf3>:
     99c:	50 58       	subi	r21, 0x80	; 128

0000099e <__addsf3>:
     99e:	bb 27       	eor	r27, r27
     9a0:	aa 27       	eor	r26, r26
     9a2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__addsf3x>
     9a6:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_round>
     9aa:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscA>
     9ae:	38 f0       	brcs	.+14     	; 0x9be <__addsf3+0x20>
     9b0:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_pscB>
     9b4:	20 f0       	brcs	.+8      	; 0x9be <__addsf3+0x20>
     9b6:	39 f4       	brne	.+14     	; 0x9c6 <__addsf3+0x28>
     9b8:	9f 3f       	cpi	r25, 0xFF	; 255
     9ba:	19 f4       	brne	.+6      	; 0x9c2 <__addsf3+0x24>
     9bc:	26 f4       	brtc	.+8      	; 0x9c6 <__addsf3+0x28>
     9be:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_nan>
     9c2:	0e f4       	brtc	.+2      	; 0x9c6 <__addsf3+0x28>
     9c4:	e0 95       	com	r30
     9c6:	e7 fb       	bst	r30, 7
     9c8:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_inf>

000009cc <__addsf3x>:
     9cc:	e9 2f       	mov	r30, r25
     9ce:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_split3>
     9d2:	58 f3       	brcs	.-42     	; 0x9aa <__addsf3+0xc>
     9d4:	ba 17       	cp	r27, r26
     9d6:	62 07       	cpc	r22, r18
     9d8:	73 07       	cpc	r23, r19
     9da:	84 07       	cpc	r24, r20
     9dc:	95 07       	cpc	r25, r21
     9de:	20 f0       	brcs	.+8      	; 0x9e8 <__addsf3x+0x1c>
     9e0:	79 f4       	brne	.+30     	; 0xa00 <__addsf3x+0x34>
     9e2:	a6 f5       	brtc	.+104    	; 0xa4c <__addsf3x+0x80>
     9e4:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_zero>
     9e8:	0e f4       	brtc	.+2      	; 0x9ec <__addsf3x+0x20>
     9ea:	e0 95       	com	r30
     9ec:	0b 2e       	mov	r0, r27
     9ee:	ba 2f       	mov	r27, r26
     9f0:	a0 2d       	mov	r26, r0
     9f2:	0b 01       	movw	r0, r22
     9f4:	b9 01       	movw	r22, r18
     9f6:	90 01       	movw	r18, r0
     9f8:	0c 01       	movw	r0, r24
     9fa:	ca 01       	movw	r24, r20
     9fc:	a0 01       	movw	r20, r0
     9fe:	11 24       	eor	r1, r1
     a00:	ff 27       	eor	r31, r31
     a02:	59 1b       	sub	r21, r25
     a04:	99 f0       	breq	.+38     	; 0xa2c <__addsf3x+0x60>
     a06:	59 3f       	cpi	r21, 0xF9	; 249
     a08:	50 f4       	brcc	.+20     	; 0xa1e <__addsf3x+0x52>
     a0a:	50 3e       	cpi	r21, 0xE0	; 224
     a0c:	68 f1       	brcs	.+90     	; 0xa68 <__addsf3x+0x9c>
     a0e:	1a 16       	cp	r1, r26
     a10:	f0 40       	sbci	r31, 0x00	; 0
     a12:	a2 2f       	mov	r26, r18
     a14:	23 2f       	mov	r18, r19
     a16:	34 2f       	mov	r19, r20
     a18:	44 27       	eor	r20, r20
     a1a:	58 5f       	subi	r21, 0xF8	; 248
     a1c:	f3 cf       	rjmp	.-26     	; 0xa04 <__addsf3x+0x38>
     a1e:	46 95       	lsr	r20
     a20:	37 95       	ror	r19
     a22:	27 95       	ror	r18
     a24:	a7 95       	ror	r26
     a26:	f0 40       	sbci	r31, 0x00	; 0
     a28:	53 95       	inc	r21
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <__addsf3x+0x52>
     a2c:	7e f4       	brtc	.+30     	; 0xa4c <__addsf3x+0x80>
     a2e:	1f 16       	cp	r1, r31
     a30:	ba 0b       	sbc	r27, r26
     a32:	62 0b       	sbc	r22, r18
     a34:	73 0b       	sbc	r23, r19
     a36:	84 0b       	sbc	r24, r20
     a38:	ba f0       	brmi	.+46     	; 0xa68 <__addsf3x+0x9c>
     a3a:	91 50       	subi	r25, 0x01	; 1
     a3c:	a1 f0       	breq	.+40     	; 0xa66 <__addsf3x+0x9a>
     a3e:	ff 0f       	add	r31, r31
     a40:	bb 1f       	adc	r27, r27
     a42:	66 1f       	adc	r22, r22
     a44:	77 1f       	adc	r23, r23
     a46:	88 1f       	adc	r24, r24
     a48:	c2 f7       	brpl	.-16     	; 0xa3a <__addsf3x+0x6e>
     a4a:	0e c0       	rjmp	.+28     	; 0xa68 <__addsf3x+0x9c>
     a4c:	ba 0f       	add	r27, r26
     a4e:	62 1f       	adc	r22, r18
     a50:	73 1f       	adc	r23, r19
     a52:	84 1f       	adc	r24, r20
     a54:	48 f4       	brcc	.+18     	; 0xa68 <__addsf3x+0x9c>
     a56:	87 95       	ror	r24
     a58:	77 95       	ror	r23
     a5a:	67 95       	ror	r22
     a5c:	b7 95       	ror	r27
     a5e:	f7 95       	ror	r31
     a60:	9e 3f       	cpi	r25, 0xFE	; 254
     a62:	08 f0       	brcs	.+2      	; 0xa66 <__addsf3x+0x9a>
     a64:	b0 cf       	rjmp	.-160    	; 0x9c6 <__addsf3+0x28>
     a66:	93 95       	inc	r25
     a68:	88 0f       	add	r24, r24
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <__addsf3x+0xa2>
     a6c:	99 27       	eor	r25, r25
     a6e:	ee 0f       	add	r30, r30
     a70:	97 95       	ror	r25
     a72:	87 95       	ror	r24
     a74:	08 95       	ret

00000a76 <__divsf3>:
     a76:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__divsf3x>
     a7a:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_round>
     a7e:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_pscB>
     a82:	58 f0       	brcs	.+22     	; 0xa9a <__divsf3+0x24>
     a84:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscA>
     a88:	40 f0       	brcs	.+16     	; 0xa9a <__divsf3+0x24>
     a8a:	29 f4       	brne	.+10     	; 0xa96 <__divsf3+0x20>
     a8c:	5f 3f       	cpi	r21, 0xFF	; 255
     a8e:	29 f0       	breq	.+10     	; 0xa9a <__divsf3+0x24>
     a90:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_inf>
     a94:	51 11       	cpse	r21, r1
     a96:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_szero>
     a9a:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_nan>

00000a9e <__divsf3x>:
     a9e:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_split3>
     aa2:	68 f3       	brcs	.-38     	; 0xa7e <__divsf3+0x8>

00000aa4 <__divsf3_pse>:
     aa4:	99 23       	and	r25, r25
     aa6:	b1 f3       	breq	.-20     	; 0xa94 <__divsf3+0x1e>
     aa8:	55 23       	and	r21, r21
     aaa:	91 f3       	breq	.-28     	; 0xa90 <__divsf3+0x1a>
     aac:	95 1b       	sub	r25, r21
     aae:	55 0b       	sbc	r21, r21
     ab0:	bb 27       	eor	r27, r27
     ab2:	aa 27       	eor	r26, r26
     ab4:	62 17       	cp	r22, r18
     ab6:	73 07       	cpc	r23, r19
     ab8:	84 07       	cpc	r24, r20
     aba:	38 f0       	brcs	.+14     	; 0xaca <__divsf3_pse+0x26>
     abc:	9f 5f       	subi	r25, 0xFF	; 255
     abe:	5f 4f       	sbci	r21, 0xFF	; 255
     ac0:	22 0f       	add	r18, r18
     ac2:	33 1f       	adc	r19, r19
     ac4:	44 1f       	adc	r20, r20
     ac6:	aa 1f       	adc	r26, r26
     ac8:	a9 f3       	breq	.-22     	; 0xab4 <__divsf3_pse+0x10>
     aca:	35 d0       	rcall	.+106    	; 0xb36 <__divsf3_pse+0x92>
     acc:	0e 2e       	mov	r0, r30
     ace:	3a f0       	brmi	.+14     	; 0xade <__divsf3_pse+0x3a>
     ad0:	e0 e8       	ldi	r30, 0x80	; 128
     ad2:	32 d0       	rcall	.+100    	; 0xb38 <__divsf3_pse+0x94>
     ad4:	91 50       	subi	r25, 0x01	; 1
     ad6:	50 40       	sbci	r21, 0x00	; 0
     ad8:	e6 95       	lsr	r30
     ada:	00 1c       	adc	r0, r0
     adc:	ca f7       	brpl	.-14     	; 0xad0 <__divsf3_pse+0x2c>
     ade:	2b d0       	rcall	.+86     	; 0xb36 <__divsf3_pse+0x92>
     ae0:	fe 2f       	mov	r31, r30
     ae2:	29 d0       	rcall	.+82     	; 0xb36 <__divsf3_pse+0x92>
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	88 1f       	adc	r24, r24
     aea:	bb 1f       	adc	r27, r27
     aec:	26 17       	cp	r18, r22
     aee:	37 07       	cpc	r19, r23
     af0:	48 07       	cpc	r20, r24
     af2:	ab 07       	cpc	r26, r27
     af4:	b0 e8       	ldi	r27, 0x80	; 128
     af6:	09 f0       	breq	.+2      	; 0xafa <__divsf3_pse+0x56>
     af8:	bb 0b       	sbc	r27, r27
     afa:	80 2d       	mov	r24, r0
     afc:	bf 01       	movw	r22, r30
     afe:	ff 27       	eor	r31, r31
     b00:	93 58       	subi	r25, 0x83	; 131
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	3a f0       	brmi	.+14     	; 0xb14 <__divsf3_pse+0x70>
     b06:	9e 3f       	cpi	r25, 0xFE	; 254
     b08:	51 05       	cpc	r21, r1
     b0a:	78 f0       	brcs	.+30     	; 0xb2a <__divsf3_pse+0x86>
     b0c:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_inf>
     b10:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_szero>
     b14:	5f 3f       	cpi	r21, 0xFF	; 255
     b16:	e4 f3       	brlt	.-8      	; 0xb10 <__divsf3_pse+0x6c>
     b18:	98 3e       	cpi	r25, 0xE8	; 232
     b1a:	d4 f3       	brlt	.-12     	; 0xb10 <__divsf3_pse+0x6c>
     b1c:	86 95       	lsr	r24
     b1e:	77 95       	ror	r23
     b20:	67 95       	ror	r22
     b22:	b7 95       	ror	r27
     b24:	f7 95       	ror	r31
     b26:	9f 5f       	subi	r25, 0xFF	; 255
     b28:	c9 f7       	brne	.-14     	; 0xb1c <__divsf3_pse+0x78>
     b2a:	88 0f       	add	r24, r24
     b2c:	91 1d       	adc	r25, r1
     b2e:	96 95       	lsr	r25
     b30:	87 95       	ror	r24
     b32:	97 f9       	bld	r25, 7
     b34:	08 95       	ret
     b36:	e1 e0       	ldi	r30, 0x01	; 1
     b38:	66 0f       	add	r22, r22
     b3a:	77 1f       	adc	r23, r23
     b3c:	88 1f       	adc	r24, r24
     b3e:	bb 1f       	adc	r27, r27
     b40:	62 17       	cp	r22, r18
     b42:	73 07       	cpc	r23, r19
     b44:	84 07       	cpc	r24, r20
     b46:	ba 07       	cpc	r27, r26
     b48:	20 f0       	brcs	.+8      	; 0xb52 <__divsf3_pse+0xae>
     b4a:	62 1b       	sub	r22, r18
     b4c:	73 0b       	sbc	r23, r19
     b4e:	84 0b       	sbc	r24, r20
     b50:	ba 0b       	sbc	r27, r26
     b52:	ee 1f       	adc	r30, r30
     b54:	88 f7       	brcc	.-30     	; 0xb38 <__divsf3_pse+0x94>
     b56:	e0 95       	com	r30
     b58:	08 95       	ret

00000b5a <__fixsfsi>:
     b5a:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fixunssfsi>
     b5e:	68 94       	set
     b60:	b1 11       	cpse	r27, r1
     b62:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_szero>
     b66:	08 95       	ret

00000b68 <__fixunssfsi>:
     b68:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_splitA>
     b6c:	88 f0       	brcs	.+34     	; 0xb90 <__fixunssfsi+0x28>
     b6e:	9f 57       	subi	r25, 0x7F	; 127
     b70:	98 f0       	brcs	.+38     	; 0xb98 <__fixunssfsi+0x30>
     b72:	b9 2f       	mov	r27, r25
     b74:	99 27       	eor	r25, r25
     b76:	b7 51       	subi	r27, 0x17	; 23
     b78:	b0 f0       	brcs	.+44     	; 0xba6 <__fixunssfsi+0x3e>
     b7a:	e1 f0       	breq	.+56     	; 0xbb4 <__fixunssfsi+0x4c>
     b7c:	66 0f       	add	r22, r22
     b7e:	77 1f       	adc	r23, r23
     b80:	88 1f       	adc	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	1a f0       	brmi	.+6      	; 0xb8c <__fixunssfsi+0x24>
     b86:	ba 95       	dec	r27
     b88:	c9 f7       	brne	.-14     	; 0xb7c <__fixunssfsi+0x14>
     b8a:	14 c0       	rjmp	.+40     	; 0xbb4 <__fixunssfsi+0x4c>
     b8c:	b1 30       	cpi	r27, 0x01	; 1
     b8e:	91 f0       	breq	.+36     	; 0xbb4 <__fixunssfsi+0x4c>
     b90:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fp_zero>
     b94:	b1 e0       	ldi	r27, 0x01	; 1
     b96:	08 95       	ret
     b98:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_zero>
     b9c:	67 2f       	mov	r22, r23
     b9e:	78 2f       	mov	r23, r24
     ba0:	88 27       	eor	r24, r24
     ba2:	b8 5f       	subi	r27, 0xF8	; 248
     ba4:	39 f0       	breq	.+14     	; 0xbb4 <__fixunssfsi+0x4c>
     ba6:	b9 3f       	cpi	r27, 0xF9	; 249
     ba8:	cc f3       	brlt	.-14     	; 0xb9c <__fixunssfsi+0x34>
     baa:	86 95       	lsr	r24
     bac:	77 95       	ror	r23
     bae:	67 95       	ror	r22
     bb0:	b3 95       	inc	r27
     bb2:	d9 f7       	brne	.-10     	; 0xbaa <__fixunssfsi+0x42>
     bb4:	3e f4       	brtc	.+14     	; 0xbc4 <__fixunssfsi+0x5c>
     bb6:	90 95       	com	r25
     bb8:	80 95       	com	r24
     bba:	70 95       	com	r23
     bbc:	61 95       	neg	r22
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	8f 4f       	sbci	r24, 0xFF	; 255
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	08 95       	ret

00000bc6 <__floatunsisf>:
     bc6:	e8 94       	clt
     bc8:	09 c0       	rjmp	.+18     	; 0xbdc <__floatsisf+0x12>

00000bca <__floatsisf>:
     bca:	97 fb       	bst	r25, 7
     bcc:	3e f4       	brtc	.+14     	; 0xbdc <__floatsisf+0x12>
     bce:	90 95       	com	r25
     bd0:	80 95       	com	r24
     bd2:	70 95       	com	r23
     bd4:	61 95       	neg	r22
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	8f 4f       	sbci	r24, 0xFF	; 255
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	99 23       	and	r25, r25
     bde:	a9 f0       	breq	.+42     	; 0xc0a <__floatsisf+0x40>
     be0:	f9 2f       	mov	r31, r25
     be2:	96 e9       	ldi	r25, 0x96	; 150
     be4:	bb 27       	eor	r27, r27
     be6:	93 95       	inc	r25
     be8:	f6 95       	lsr	r31
     bea:	87 95       	ror	r24
     bec:	77 95       	ror	r23
     bee:	67 95       	ror	r22
     bf0:	b7 95       	ror	r27
     bf2:	f1 11       	cpse	r31, r1
     bf4:	f8 cf       	rjmp	.-16     	; 0xbe6 <__floatsisf+0x1c>
     bf6:	fa f4       	brpl	.+62     	; 0xc36 <__floatsisf+0x6c>
     bf8:	bb 0f       	add	r27, r27
     bfa:	11 f4       	brne	.+4      	; 0xc00 <__floatsisf+0x36>
     bfc:	60 ff       	sbrs	r22, 0
     bfe:	1b c0       	rjmp	.+54     	; 0xc36 <__floatsisf+0x6c>
     c00:	6f 5f       	subi	r22, 0xFF	; 255
     c02:	7f 4f       	sbci	r23, 0xFF	; 255
     c04:	8f 4f       	sbci	r24, 0xFF	; 255
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	16 c0       	rjmp	.+44     	; 0xc36 <__floatsisf+0x6c>
     c0a:	88 23       	and	r24, r24
     c0c:	11 f0       	breq	.+4      	; 0xc12 <__floatsisf+0x48>
     c0e:	96 e9       	ldi	r25, 0x96	; 150
     c10:	11 c0       	rjmp	.+34     	; 0xc34 <__floatsisf+0x6a>
     c12:	77 23       	and	r23, r23
     c14:	21 f0       	breq	.+8      	; 0xc1e <__floatsisf+0x54>
     c16:	9e e8       	ldi	r25, 0x8E	; 142
     c18:	87 2f       	mov	r24, r23
     c1a:	76 2f       	mov	r23, r22
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__floatsisf+0x5e>
     c1e:	66 23       	and	r22, r22
     c20:	71 f0       	breq	.+28     	; 0xc3e <__floatsisf+0x74>
     c22:	96 e8       	ldi	r25, 0x86	; 134
     c24:	86 2f       	mov	r24, r22
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	2a f0       	brmi	.+10     	; 0xc36 <__floatsisf+0x6c>
     c2c:	9a 95       	dec	r25
     c2e:	66 0f       	add	r22, r22
     c30:	77 1f       	adc	r23, r23
     c32:	88 1f       	adc	r24, r24
     c34:	da f7       	brpl	.-10     	; 0xc2c <__floatsisf+0x62>
     c36:	88 0f       	add	r24, r24
     c38:	96 95       	lsr	r25
     c3a:	87 95       	ror	r24
     c3c:	97 f9       	bld	r25, 7
     c3e:	08 95       	ret

00000c40 <__fp_inf>:
     c40:	97 f9       	bld	r25, 7
     c42:	9f 67       	ori	r25, 0x7F	; 127
     c44:	80 e8       	ldi	r24, 0x80	; 128
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	08 95       	ret

00000c4c <__fp_nan>:
     c4c:	9f ef       	ldi	r25, 0xFF	; 255
     c4e:	80 ec       	ldi	r24, 0xC0	; 192
     c50:	08 95       	ret

00000c52 <__fp_pscA>:
     c52:	00 24       	eor	r0, r0
     c54:	0a 94       	dec	r0
     c56:	16 16       	cp	r1, r22
     c58:	17 06       	cpc	r1, r23
     c5a:	18 06       	cpc	r1, r24
     c5c:	09 06       	cpc	r0, r25
     c5e:	08 95       	ret

00000c60 <__fp_pscB>:
     c60:	00 24       	eor	r0, r0
     c62:	0a 94       	dec	r0
     c64:	12 16       	cp	r1, r18
     c66:	13 06       	cpc	r1, r19
     c68:	14 06       	cpc	r1, r20
     c6a:	05 06       	cpc	r0, r21
     c6c:	08 95       	ret

00000c6e <__fp_round>:
     c6e:	09 2e       	mov	r0, r25
     c70:	03 94       	inc	r0
     c72:	00 0c       	add	r0, r0
     c74:	11 f4       	brne	.+4      	; 0xc7a <__fp_round+0xc>
     c76:	88 23       	and	r24, r24
     c78:	52 f0       	brmi	.+20     	; 0xc8e <__fp_round+0x20>
     c7a:	bb 0f       	add	r27, r27
     c7c:	40 f4       	brcc	.+16     	; 0xc8e <__fp_round+0x20>
     c7e:	bf 2b       	or	r27, r31
     c80:	11 f4       	brne	.+4      	; 0xc86 <__fp_round+0x18>
     c82:	60 ff       	sbrs	r22, 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__fp_round+0x20>
     c86:	6f 5f       	subi	r22, 0xFF	; 255
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	8f 4f       	sbci	r24, 0xFF	; 255
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	08 95       	ret

00000c90 <__fp_split3>:
     c90:	57 fd       	sbrc	r21, 7
     c92:	90 58       	subi	r25, 0x80	; 128
     c94:	44 0f       	add	r20, r20
     c96:	55 1f       	adc	r21, r21
     c98:	59 f0       	breq	.+22     	; 0xcb0 <__fp_splitA+0x10>
     c9a:	5f 3f       	cpi	r21, 0xFF	; 255
     c9c:	71 f0       	breq	.+28     	; 0xcba <__fp_splitA+0x1a>
     c9e:	47 95       	ror	r20

00000ca0 <__fp_splitA>:
     ca0:	88 0f       	add	r24, r24
     ca2:	97 fb       	bst	r25, 7
     ca4:	99 1f       	adc	r25, r25
     ca6:	61 f0       	breq	.+24     	; 0xcc0 <__fp_splitA+0x20>
     ca8:	9f 3f       	cpi	r25, 0xFF	; 255
     caa:	79 f0       	breq	.+30     	; 0xcca <__fp_splitA+0x2a>
     cac:	87 95       	ror	r24
     cae:	08 95       	ret
     cb0:	12 16       	cp	r1, r18
     cb2:	13 06       	cpc	r1, r19
     cb4:	14 06       	cpc	r1, r20
     cb6:	55 1f       	adc	r21, r21
     cb8:	f2 cf       	rjmp	.-28     	; 0xc9e <__fp_split3+0xe>
     cba:	46 95       	lsr	r20
     cbc:	f1 df       	rcall	.-30     	; 0xca0 <__fp_splitA>
     cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <__fp_splitA+0x30>
     cc0:	16 16       	cp	r1, r22
     cc2:	17 06       	cpc	r1, r23
     cc4:	18 06       	cpc	r1, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	f1 cf       	rjmp	.-30     	; 0xcac <__fp_splitA+0xc>
     cca:	86 95       	lsr	r24
     ccc:	71 05       	cpc	r23, r1
     cce:	61 05       	cpc	r22, r1
     cd0:	08 94       	sec
     cd2:	08 95       	ret

00000cd4 <__fp_zero>:
     cd4:	e8 94       	clt

00000cd6 <__fp_szero>:
     cd6:	bb 27       	eor	r27, r27
     cd8:	66 27       	eor	r22, r22
     cda:	77 27       	eor	r23, r23
     cdc:	cb 01       	movw	r24, r22
     cde:	97 f9       	bld	r25, 7
     ce0:	08 95       	ret

00000ce2 <__mulsf3>:
     ce2:	0e 94 84 06 	call	0xd08	; 0xd08 <__mulsf3x>
     ce6:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_round>
     cea:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscA>
     cee:	38 f0       	brcs	.+14     	; 0xcfe <__mulsf3+0x1c>
     cf0:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_pscB>
     cf4:	20 f0       	brcs	.+8      	; 0xcfe <__mulsf3+0x1c>
     cf6:	95 23       	and	r25, r21
     cf8:	11 f0       	breq	.+4      	; 0xcfe <__mulsf3+0x1c>
     cfa:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_inf>
     cfe:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_nan>
     d02:	11 24       	eor	r1, r1
     d04:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_szero>

00000d08 <__mulsf3x>:
     d08:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_split3>
     d0c:	70 f3       	brcs	.-36     	; 0xcea <__mulsf3+0x8>

00000d0e <__mulsf3_pse>:
     d0e:	95 9f       	mul	r25, r21
     d10:	c1 f3       	breq	.-16     	; 0xd02 <__mulsf3+0x20>
     d12:	95 0f       	add	r25, r21
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	55 1f       	adc	r21, r21
     d18:	62 9f       	mul	r22, r18
     d1a:	f0 01       	movw	r30, r0
     d1c:	72 9f       	mul	r23, r18
     d1e:	bb 27       	eor	r27, r27
     d20:	f0 0d       	add	r31, r0
     d22:	b1 1d       	adc	r27, r1
     d24:	63 9f       	mul	r22, r19
     d26:	aa 27       	eor	r26, r26
     d28:	f0 0d       	add	r31, r0
     d2a:	b1 1d       	adc	r27, r1
     d2c:	aa 1f       	adc	r26, r26
     d2e:	64 9f       	mul	r22, r20
     d30:	66 27       	eor	r22, r22
     d32:	b0 0d       	add	r27, r0
     d34:	a1 1d       	adc	r26, r1
     d36:	66 1f       	adc	r22, r22
     d38:	82 9f       	mul	r24, r18
     d3a:	22 27       	eor	r18, r18
     d3c:	b0 0d       	add	r27, r0
     d3e:	a1 1d       	adc	r26, r1
     d40:	62 1f       	adc	r22, r18
     d42:	73 9f       	mul	r23, r19
     d44:	b0 0d       	add	r27, r0
     d46:	a1 1d       	adc	r26, r1
     d48:	62 1f       	adc	r22, r18
     d4a:	83 9f       	mul	r24, r19
     d4c:	a0 0d       	add	r26, r0
     d4e:	61 1d       	adc	r22, r1
     d50:	22 1f       	adc	r18, r18
     d52:	74 9f       	mul	r23, r20
     d54:	33 27       	eor	r19, r19
     d56:	a0 0d       	add	r26, r0
     d58:	61 1d       	adc	r22, r1
     d5a:	23 1f       	adc	r18, r19
     d5c:	84 9f       	mul	r24, r20
     d5e:	60 0d       	add	r22, r0
     d60:	21 1d       	adc	r18, r1
     d62:	82 2f       	mov	r24, r18
     d64:	76 2f       	mov	r23, r22
     d66:	6a 2f       	mov	r22, r26
     d68:	11 24       	eor	r1, r1
     d6a:	9f 57       	subi	r25, 0x7F	; 127
     d6c:	50 40       	sbci	r21, 0x00	; 0
     d6e:	9a f0       	brmi	.+38     	; 0xd96 <__mulsf3_pse+0x88>
     d70:	f1 f0       	breq	.+60     	; 0xdae <__mulsf3_pse+0xa0>
     d72:	88 23       	and	r24, r24
     d74:	4a f0       	brmi	.+18     	; 0xd88 <__mulsf3_pse+0x7a>
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	bb 1f       	adc	r27, r27
     d7c:	66 1f       	adc	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	88 1f       	adc	r24, r24
     d82:	91 50       	subi	r25, 0x01	; 1
     d84:	50 40       	sbci	r21, 0x00	; 0
     d86:	a9 f7       	brne	.-22     	; 0xd72 <__mulsf3_pse+0x64>
     d88:	9e 3f       	cpi	r25, 0xFE	; 254
     d8a:	51 05       	cpc	r21, r1
     d8c:	80 f0       	brcs	.+32     	; 0xdae <__mulsf3_pse+0xa0>
     d8e:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_inf>
     d92:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_szero>
     d96:	5f 3f       	cpi	r21, 0xFF	; 255
     d98:	e4 f3       	brlt	.-8      	; 0xd92 <__mulsf3_pse+0x84>
     d9a:	98 3e       	cpi	r25, 0xE8	; 232
     d9c:	d4 f3       	brlt	.-12     	; 0xd92 <__mulsf3_pse+0x84>
     d9e:	86 95       	lsr	r24
     da0:	77 95       	ror	r23
     da2:	67 95       	ror	r22
     da4:	b7 95       	ror	r27
     da6:	f7 95       	ror	r31
     da8:	e7 95       	ror	r30
     daa:	9f 5f       	subi	r25, 0xFF	; 255
     dac:	c1 f7       	brne	.-16     	; 0xd9e <__mulsf3_pse+0x90>
     dae:	fe 2b       	or	r31, r30
     db0:	88 0f       	add	r24, r24
     db2:	91 1d       	adc	r25, r1
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	97 f9       	bld	r25, 7
     dba:	08 95       	ret

00000dbc <round>:
     dbc:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_splitA>
     dc0:	e8 f0       	brcs	.+58     	; 0xdfc <round+0x40>
     dc2:	9e 37       	cpi	r25, 0x7E	; 126
     dc4:	e8 f0       	brcs	.+58     	; 0xe00 <round+0x44>
     dc6:	96 39       	cpi	r25, 0x96	; 150
     dc8:	b8 f4       	brcc	.+46     	; 0xdf8 <round+0x3c>
     dca:	9e 38       	cpi	r25, 0x8E	; 142
     dcc:	48 f4       	brcc	.+18     	; 0xde0 <round+0x24>
     dce:	67 2f       	mov	r22, r23
     dd0:	78 2f       	mov	r23, r24
     dd2:	88 27       	eor	r24, r24
     dd4:	98 5f       	subi	r25, 0xF8	; 248
     dd6:	f9 cf       	rjmp	.-14     	; 0xdca <round+0xe>
     dd8:	86 95       	lsr	r24
     dda:	77 95       	ror	r23
     ddc:	67 95       	ror	r22
     dde:	93 95       	inc	r25
     de0:	95 39       	cpi	r25, 0x95	; 149
     de2:	d0 f3       	brcs	.-12     	; 0xdd8 <round+0x1c>
     de4:	b6 2f       	mov	r27, r22
     de6:	b1 70       	andi	r27, 0x01	; 1
     de8:	6b 0f       	add	r22, r27
     dea:	71 1d       	adc	r23, r1
     dec:	81 1d       	adc	r24, r1
     dee:	20 f4       	brcc	.+8      	; 0xdf8 <round+0x3c>
     df0:	87 95       	ror	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	93 95       	inc	r25
     df8:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__fp_mintl>
     dfc:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__fp_mpack>
     e00:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_szero>

00000e04 <__fp_mintl>:
     e04:	88 23       	and	r24, r24
     e06:	71 f4       	brne	.+28     	; 0xe24 <__fp_mintl+0x20>
     e08:	77 23       	and	r23, r23
     e0a:	21 f0       	breq	.+8      	; 0xe14 <__fp_mintl+0x10>
     e0c:	98 50       	subi	r25, 0x08	; 8
     e0e:	87 2b       	or	r24, r23
     e10:	76 2f       	mov	r23, r22
     e12:	07 c0       	rjmp	.+14     	; 0xe22 <__fp_mintl+0x1e>
     e14:	66 23       	and	r22, r22
     e16:	11 f4       	brne	.+4      	; 0xe1c <__fp_mintl+0x18>
     e18:	99 27       	eor	r25, r25
     e1a:	0d c0       	rjmp	.+26     	; 0xe36 <__fp_mintl+0x32>
     e1c:	90 51       	subi	r25, 0x10	; 16
     e1e:	86 2b       	or	r24, r22
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	2a f0       	brmi	.+10     	; 0xe30 <__fp_mintl+0x2c>
     e26:	9a 95       	dec	r25
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	da f7       	brpl	.-10     	; 0xe26 <__fp_mintl+0x22>
     e30:	88 0f       	add	r24, r24
     e32:	96 95       	lsr	r25
     e34:	87 95       	ror	r24
     e36:	97 f9       	bld	r25, 7
     e38:	08 95       	ret

00000e3a <__fp_mpack>:
     e3a:	9f 3f       	cpi	r25, 0xFF	; 255
     e3c:	31 f0       	breq	.+12     	; 0xe4a <__fp_mpack_finite+0xc>

00000e3e <__fp_mpack_finite>:
     e3e:	91 50       	subi	r25, 0x01	; 1
     e40:	20 f4       	brcc	.+8      	; 0xe4a <__fp_mpack_finite+0xc>
     e42:	87 95       	ror	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b7 95       	ror	r27
     e4a:	88 0f       	add	r24, r24
     e4c:	91 1d       	adc	r25, r1
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	97 f9       	bld	r25, 7
     e54:	08 95       	ret

00000e56 <memcpy>:
     e56:	fb 01       	movw	r30, r22
     e58:	dc 01       	movw	r26, r24
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <memcpy+0xa>
     e5c:	01 90       	ld	r0, Z+
     e5e:	0d 92       	st	X+, r0
     e60:	41 50       	subi	r20, 0x01	; 1
     e62:	50 40       	sbci	r21, 0x00	; 0
     e64:	d8 f7       	brcc	.-10     	; 0xe5c <memcpy+0x6>
     e66:	08 95       	ret

00000e68 <memmove>:
     e68:	68 17       	cp	r22, r24
     e6a:	79 07       	cpc	r23, r25
     e6c:	68 f4       	brcc	.+26     	; 0xe88 <memmove+0x20>
     e6e:	fb 01       	movw	r30, r22
     e70:	dc 01       	movw	r26, r24
     e72:	e4 0f       	add	r30, r20
     e74:	f5 1f       	adc	r31, r21
     e76:	a4 0f       	add	r26, r20
     e78:	b5 1f       	adc	r27, r21
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <memmove+0x18>
     e7c:	02 90       	ld	r0, -Z
     e7e:	0e 92       	st	-X, r0
     e80:	41 50       	subi	r20, 0x01	; 1
     e82:	50 40       	sbci	r21, 0x00	; 0
     e84:	d8 f7       	brcc	.-10     	; 0xe7c <memmove+0x14>
     e86:	08 95       	ret
     e88:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <memcpy>

00000e8c <strncmp>:
     e8c:	fb 01       	movw	r30, r22
     e8e:	dc 01       	movw	r26, r24
     e90:	41 50       	subi	r20, 0x01	; 1
     e92:	50 40       	sbci	r21, 0x00	; 0
     e94:	30 f0       	brcs	.+12     	; 0xea2 <strncmp+0x16>
     e96:	8d 91       	ld	r24, X+
     e98:	01 90       	ld	r0, Z+
     e9a:	80 19       	sub	r24, r0
     e9c:	19 f4       	brne	.+6      	; 0xea4 <strncmp+0x18>
     e9e:	00 20       	and	r0, r0
     ea0:	b9 f7       	brne	.-18     	; 0xe90 <strncmp+0x4>
     ea2:	88 1b       	sub	r24, r24
     ea4:	99 0b       	sbc	r25, r25
     ea6:	08 95       	ret

00000ea8 <strstr>:
     ea8:	fb 01       	movw	r30, r22
     eaa:	51 91       	ld	r21, Z+
     eac:	55 23       	and	r21, r21
     eae:	a9 f0       	breq	.+42     	; 0xeda <strstr+0x32>
     eb0:	bf 01       	movw	r22, r30
     eb2:	dc 01       	movw	r26, r24
     eb4:	4d 91       	ld	r20, X+
     eb6:	45 17       	cp	r20, r21
     eb8:	41 11       	cpse	r20, r1
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <strstr+0xc>
     ebc:	59 f4       	brne	.+22     	; 0xed4 <strstr+0x2c>
     ebe:	cd 01       	movw	r24, r26
     ec0:	01 90       	ld	r0, Z+
     ec2:	00 20       	and	r0, r0
     ec4:	49 f0       	breq	.+18     	; 0xed8 <strstr+0x30>
     ec6:	4d 91       	ld	r20, X+
     ec8:	40 15       	cp	r20, r0
     eca:	41 11       	cpse	r20, r1
     ecc:	c9 f3       	breq	.-14     	; 0xec0 <strstr+0x18>
     ece:	fb 01       	movw	r30, r22
     ed0:	41 11       	cpse	r20, r1
     ed2:	ef cf       	rjmp	.-34     	; 0xeb2 <strstr+0xa>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	08 95       	ret

00000edc <sprintf>:
     edc:	ae e0       	ldi	r26, 0x0E	; 14
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e4 e7       	ldi	r30, 0x74	; 116
     ee2:	f7 e0       	ldi	r31, 0x07	; 7
     ee4:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__prologue_saves__+0x1c>
     ee8:	0d 89       	ldd	r16, Y+21	; 0x15
     eea:	1e 89       	ldd	r17, Y+22	; 0x16
     eec:	86 e0       	ldi	r24, 0x06	; 6
     eee:	8c 83       	std	Y+4, r24	; 0x04
     ef0:	1a 83       	std	Y+2, r17	; 0x02
     ef2:	09 83       	std	Y+1, r16	; 0x01
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	9f e7       	ldi	r25, 0x7F	; 127
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	ae 01       	movw	r20, r28
     efe:	47 5e       	subi	r20, 0xE7	; 231
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	6f 89       	ldd	r22, Y+23	; 0x17
     f04:	78 8d       	ldd	r23, Y+24	; 0x18
     f06:	ce 01       	movw	r24, r28
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	0e 94 90 07 	call	0xf20	; 0xf20 <vfprintf>
     f0e:	ef 81       	ldd	r30, Y+7	; 0x07
     f10:	f8 85       	ldd	r31, Y+8	; 0x08
     f12:	e0 0f       	add	r30, r16
     f14:	f1 1f       	adc	r31, r17
     f16:	10 82       	st	Z, r1
     f18:	2e 96       	adiw	r28, 0x0e	; 14
     f1a:	e4 e0       	ldi	r30, 0x04	; 4
     f1c:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__epilogue_restores__+0x1c>

00000f20 <vfprintf>:
     f20:	ab e0       	ldi	r26, 0x0B	; 11
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e6 e9       	ldi	r30, 0x96	; 150
     f26:	f7 e0       	ldi	r31, 0x07	; 7
     f28:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__prologue_saves__>
     f2c:	6c 01       	movw	r12, r24
     f2e:	7b 01       	movw	r14, r22
     f30:	8a 01       	movw	r16, r20
     f32:	fc 01       	movw	r30, r24
     f34:	17 82       	std	Z+7, r1	; 0x07
     f36:	16 82       	std	Z+6, r1	; 0x06
     f38:	83 81       	ldd	r24, Z+3	; 0x03
     f3a:	81 ff       	sbrs	r24, 1
     f3c:	cc c1       	rjmp	.+920    	; 0x12d6 <vfprintf+0x3b6>
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	3c 01       	movw	r6, r24
     f44:	f6 01       	movw	r30, r12
     f46:	93 81       	ldd	r25, Z+3	; 0x03
     f48:	f7 01       	movw	r30, r14
     f4a:	93 fd       	sbrc	r25, 3
     f4c:	85 91       	lpm	r24, Z+
     f4e:	93 ff       	sbrs	r25, 3
     f50:	81 91       	ld	r24, Z+
     f52:	7f 01       	movw	r14, r30
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <vfprintf+0x3a>
     f58:	ba c1       	rjmp	.+884    	; 0x12ce <vfprintf+0x3ae>
     f5a:	85 32       	cpi	r24, 0x25	; 37
     f5c:	39 f4       	brne	.+14     	; 0xf6c <vfprintf+0x4c>
     f5e:	93 fd       	sbrc	r25, 3
     f60:	85 91       	lpm	r24, Z+
     f62:	93 ff       	sbrs	r25, 3
     f64:	81 91       	ld	r24, Z+
     f66:	7f 01       	movw	r14, r30
     f68:	85 32       	cpi	r24, 0x25	; 37
     f6a:	29 f4       	brne	.+10     	; 0xf76 <vfprintf+0x56>
     f6c:	b6 01       	movw	r22, r12
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
     f74:	e7 cf       	rjmp	.-50     	; 0xf44 <vfprintf+0x24>
     f76:	91 2c       	mov	r9, r1
     f78:	21 2c       	mov	r2, r1
     f7a:	31 2c       	mov	r3, r1
     f7c:	ff e1       	ldi	r31, 0x1F	; 31
     f7e:	f3 15       	cp	r31, r3
     f80:	d8 f0       	brcs	.+54     	; 0xfb8 <vfprintf+0x98>
     f82:	8b 32       	cpi	r24, 0x2B	; 43
     f84:	79 f0       	breq	.+30     	; 0xfa4 <vfprintf+0x84>
     f86:	38 f4       	brcc	.+14     	; 0xf96 <vfprintf+0x76>
     f88:	80 32       	cpi	r24, 0x20	; 32
     f8a:	79 f0       	breq	.+30     	; 0xfaa <vfprintf+0x8a>
     f8c:	83 32       	cpi	r24, 0x23	; 35
     f8e:	a1 f4       	brne	.+40     	; 0xfb8 <vfprintf+0x98>
     f90:	23 2d       	mov	r18, r3
     f92:	20 61       	ori	r18, 0x10	; 16
     f94:	1d c0       	rjmp	.+58     	; 0xfd0 <vfprintf+0xb0>
     f96:	8d 32       	cpi	r24, 0x2D	; 45
     f98:	61 f0       	breq	.+24     	; 0xfb2 <vfprintf+0x92>
     f9a:	80 33       	cpi	r24, 0x30	; 48
     f9c:	69 f4       	brne	.+26     	; 0xfb8 <vfprintf+0x98>
     f9e:	23 2d       	mov	r18, r3
     fa0:	21 60       	ori	r18, 0x01	; 1
     fa2:	16 c0       	rjmp	.+44     	; 0xfd0 <vfprintf+0xb0>
     fa4:	83 2d       	mov	r24, r3
     fa6:	82 60       	ori	r24, 0x02	; 2
     fa8:	38 2e       	mov	r3, r24
     faa:	e3 2d       	mov	r30, r3
     fac:	e4 60       	ori	r30, 0x04	; 4
     fae:	3e 2e       	mov	r3, r30
     fb0:	2a c0       	rjmp	.+84     	; 0x1006 <vfprintf+0xe6>
     fb2:	f3 2d       	mov	r31, r3
     fb4:	f8 60       	ori	r31, 0x08	; 8
     fb6:	1d c0       	rjmp	.+58     	; 0xff2 <vfprintf+0xd2>
     fb8:	37 fc       	sbrc	r3, 7
     fba:	2d c0       	rjmp	.+90     	; 0x1016 <vfprintf+0xf6>
     fbc:	20 ed       	ldi	r18, 0xD0	; 208
     fbe:	28 0f       	add	r18, r24
     fc0:	2a 30       	cpi	r18, 0x0A	; 10
     fc2:	40 f0       	brcs	.+16     	; 0xfd4 <vfprintf+0xb4>
     fc4:	8e 32       	cpi	r24, 0x2E	; 46
     fc6:	b9 f4       	brne	.+46     	; 0xff6 <vfprintf+0xd6>
     fc8:	36 fc       	sbrc	r3, 6
     fca:	81 c1       	rjmp	.+770    	; 0x12ce <vfprintf+0x3ae>
     fcc:	23 2d       	mov	r18, r3
     fce:	20 64       	ori	r18, 0x40	; 64
     fd0:	32 2e       	mov	r3, r18
     fd2:	19 c0       	rjmp	.+50     	; 0x1006 <vfprintf+0xe6>
     fd4:	36 fe       	sbrs	r3, 6
     fd6:	06 c0       	rjmp	.+12     	; 0xfe4 <vfprintf+0xc4>
     fd8:	8a e0       	ldi	r24, 0x0A	; 10
     fda:	98 9e       	mul	r9, r24
     fdc:	20 0d       	add	r18, r0
     fde:	11 24       	eor	r1, r1
     fe0:	92 2e       	mov	r9, r18
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <vfprintf+0xe6>
     fe4:	ea e0       	ldi	r30, 0x0A	; 10
     fe6:	2e 9e       	mul	r2, r30
     fe8:	20 0d       	add	r18, r0
     fea:	11 24       	eor	r1, r1
     fec:	22 2e       	mov	r2, r18
     fee:	f3 2d       	mov	r31, r3
     ff0:	f0 62       	ori	r31, 0x20	; 32
     ff2:	3f 2e       	mov	r3, r31
     ff4:	08 c0       	rjmp	.+16     	; 0x1006 <vfprintf+0xe6>
     ff6:	8c 36       	cpi	r24, 0x6C	; 108
     ff8:	21 f4       	brne	.+8      	; 0x1002 <vfprintf+0xe2>
     ffa:	83 2d       	mov	r24, r3
     ffc:	80 68       	ori	r24, 0x80	; 128
     ffe:	38 2e       	mov	r3, r24
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <vfprintf+0xe6>
    1002:	88 36       	cpi	r24, 0x68	; 104
    1004:	41 f4       	brne	.+16     	; 0x1016 <vfprintf+0xf6>
    1006:	f7 01       	movw	r30, r14
    1008:	93 fd       	sbrc	r25, 3
    100a:	85 91       	lpm	r24, Z+
    100c:	93 ff       	sbrs	r25, 3
    100e:	81 91       	ld	r24, Z+
    1010:	7f 01       	movw	r14, r30
    1012:	81 11       	cpse	r24, r1
    1014:	b3 cf       	rjmp	.-154    	; 0xf7c <vfprintf+0x5c>
    1016:	98 2f       	mov	r25, r24
    1018:	9f 7d       	andi	r25, 0xDF	; 223
    101a:	95 54       	subi	r25, 0x45	; 69
    101c:	93 30       	cpi	r25, 0x03	; 3
    101e:	28 f4       	brcc	.+10     	; 0x102a <vfprintf+0x10a>
    1020:	0c 5f       	subi	r16, 0xFC	; 252
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	9f e3       	ldi	r25, 0x3F	; 63
    1026:	99 83       	std	Y+1, r25	; 0x01
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <vfprintf+0x124>
    102a:	83 36       	cpi	r24, 0x63	; 99
    102c:	31 f0       	breq	.+12     	; 0x103a <vfprintf+0x11a>
    102e:	83 37       	cpi	r24, 0x73	; 115
    1030:	71 f0       	breq	.+28     	; 0x104e <vfprintf+0x12e>
    1032:	83 35       	cpi	r24, 0x53	; 83
    1034:	09 f0       	breq	.+2      	; 0x1038 <vfprintf+0x118>
    1036:	59 c0       	rjmp	.+178    	; 0x10ea <vfprintf+0x1ca>
    1038:	21 c0       	rjmp	.+66     	; 0x107c <vfprintf+0x15c>
    103a:	f8 01       	movw	r30, r16
    103c:	80 81       	ld	r24, Z
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	0e 5f       	subi	r16, 0xFE	; 254
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	88 24       	eor	r8, r8
    1046:	83 94       	inc	r8
    1048:	91 2c       	mov	r9, r1
    104a:	53 01       	movw	r10, r6
    104c:	13 c0       	rjmp	.+38     	; 0x1074 <vfprintf+0x154>
    104e:	28 01       	movw	r4, r16
    1050:	f2 e0       	ldi	r31, 0x02	; 2
    1052:	4f 0e       	add	r4, r31
    1054:	51 1c       	adc	r5, r1
    1056:	f8 01       	movw	r30, r16
    1058:	a0 80       	ld	r10, Z
    105a:	b1 80       	ldd	r11, Z+1	; 0x01
    105c:	36 fe       	sbrs	r3, 6
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <vfprintf+0x146>
    1060:	69 2d       	mov	r22, r9
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vfprintf+0x14a>
    1066:	6f ef       	ldi	r22, 0xFF	; 255
    1068:	7f ef       	ldi	r23, 0xFF	; 255
    106a:	c5 01       	movw	r24, r10
    106c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <strnlen>
    1070:	4c 01       	movw	r8, r24
    1072:	82 01       	movw	r16, r4
    1074:	f3 2d       	mov	r31, r3
    1076:	ff 77       	andi	r31, 0x7F	; 127
    1078:	3f 2e       	mov	r3, r31
    107a:	16 c0       	rjmp	.+44     	; 0x10a8 <vfprintf+0x188>
    107c:	28 01       	movw	r4, r16
    107e:	22 e0       	ldi	r18, 0x02	; 2
    1080:	42 0e       	add	r4, r18
    1082:	51 1c       	adc	r5, r1
    1084:	f8 01       	movw	r30, r16
    1086:	a0 80       	ld	r10, Z
    1088:	b1 80       	ldd	r11, Z+1	; 0x01
    108a:	36 fe       	sbrs	r3, 6
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <vfprintf+0x174>
    108e:	69 2d       	mov	r22, r9
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <vfprintf+0x178>
    1094:	6f ef       	ldi	r22, 0xFF	; 255
    1096:	7f ef       	ldi	r23, 0xFF	; 255
    1098:	c5 01       	movw	r24, r10
    109a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strnlen_P>
    109e:	4c 01       	movw	r8, r24
    10a0:	f3 2d       	mov	r31, r3
    10a2:	f0 68       	ori	r31, 0x80	; 128
    10a4:	3f 2e       	mov	r3, r31
    10a6:	82 01       	movw	r16, r4
    10a8:	33 fc       	sbrc	r3, 3
    10aa:	1b c0       	rjmp	.+54     	; 0x10e2 <vfprintf+0x1c2>
    10ac:	82 2d       	mov	r24, r2
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	88 16       	cp	r8, r24
    10b2:	99 06       	cpc	r9, r25
    10b4:	b0 f4       	brcc	.+44     	; 0x10e2 <vfprintf+0x1c2>
    10b6:	b6 01       	movw	r22, r12
    10b8:	80 e2       	ldi	r24, 0x20	; 32
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
    10c0:	2a 94       	dec	r2
    10c2:	f4 cf       	rjmp	.-24     	; 0x10ac <vfprintf+0x18c>
    10c4:	f5 01       	movw	r30, r10
    10c6:	37 fc       	sbrc	r3, 7
    10c8:	85 91       	lpm	r24, Z+
    10ca:	37 fe       	sbrs	r3, 7
    10cc:	81 91       	ld	r24, Z+
    10ce:	5f 01       	movw	r10, r30
    10d0:	b6 01       	movw	r22, r12
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
    10d8:	21 10       	cpse	r2, r1
    10da:	2a 94       	dec	r2
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	82 1a       	sub	r8, r18
    10e0:	91 08       	sbc	r9, r1
    10e2:	81 14       	cp	r8, r1
    10e4:	91 04       	cpc	r9, r1
    10e6:	71 f7       	brne	.-36     	; 0x10c4 <vfprintf+0x1a4>
    10e8:	e8 c0       	rjmp	.+464    	; 0x12ba <vfprintf+0x39a>
    10ea:	84 36       	cpi	r24, 0x64	; 100
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <vfprintf+0x1d2>
    10ee:	89 36       	cpi	r24, 0x69	; 105
    10f0:	41 f5       	brne	.+80     	; 0x1142 <vfprintf+0x222>
    10f2:	f8 01       	movw	r30, r16
    10f4:	37 fe       	sbrs	r3, 7
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <vfprintf+0x1e6>
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	0c 5f       	subi	r16, 0xFC	; 252
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <vfprintf+0x1f6>
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	07 2e       	mov	r0, r23
    110c:	00 0c       	add	r0, r0
    110e:	88 0b       	sbc	r24, r24
    1110:	99 0b       	sbc	r25, r25
    1112:	0e 5f       	subi	r16, 0xFE	; 254
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	f3 2d       	mov	r31, r3
    1118:	ff 76       	andi	r31, 0x6F	; 111
    111a:	3f 2e       	mov	r3, r31
    111c:	97 ff       	sbrs	r25, 7
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <vfprintf+0x212>
    1120:	90 95       	com	r25
    1122:	80 95       	com	r24
    1124:	70 95       	com	r23
    1126:	61 95       	neg	r22
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	8f 4f       	sbci	r24, 0xFF	; 255
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	f0 68       	ori	r31, 0x80	; 128
    1130:	3f 2e       	mov	r3, r31
    1132:	2a e0       	ldi	r18, 0x0A	; 10
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	a3 01       	movw	r20, r6
    1138:	0e 94 c3 09 	call	0x1386	; 0x1386 <__ultoa_invert>
    113c:	88 2e       	mov	r8, r24
    113e:	86 18       	sub	r8, r6
    1140:	45 c0       	rjmp	.+138    	; 0x11cc <vfprintf+0x2ac>
    1142:	85 37       	cpi	r24, 0x75	; 117
    1144:	31 f4       	brne	.+12     	; 0x1152 <vfprintf+0x232>
    1146:	23 2d       	mov	r18, r3
    1148:	2f 7e       	andi	r18, 0xEF	; 239
    114a:	b2 2e       	mov	r11, r18
    114c:	2a e0       	ldi	r18, 0x0A	; 10
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	25 c0       	rjmp	.+74     	; 0x119c <vfprintf+0x27c>
    1152:	93 2d       	mov	r25, r3
    1154:	99 7f       	andi	r25, 0xF9	; 249
    1156:	b9 2e       	mov	r11, r25
    1158:	8f 36       	cpi	r24, 0x6F	; 111
    115a:	c1 f0       	breq	.+48     	; 0x118c <vfprintf+0x26c>
    115c:	18 f4       	brcc	.+6      	; 0x1164 <vfprintf+0x244>
    115e:	88 35       	cpi	r24, 0x58	; 88
    1160:	79 f0       	breq	.+30     	; 0x1180 <vfprintf+0x260>
    1162:	b5 c0       	rjmp	.+362    	; 0x12ce <vfprintf+0x3ae>
    1164:	80 37       	cpi	r24, 0x70	; 112
    1166:	19 f0       	breq	.+6      	; 0x116e <vfprintf+0x24e>
    1168:	88 37       	cpi	r24, 0x78	; 120
    116a:	21 f0       	breq	.+8      	; 0x1174 <vfprintf+0x254>
    116c:	b0 c0       	rjmp	.+352    	; 0x12ce <vfprintf+0x3ae>
    116e:	e9 2f       	mov	r30, r25
    1170:	e0 61       	ori	r30, 0x10	; 16
    1172:	be 2e       	mov	r11, r30
    1174:	b4 fe       	sbrs	r11, 4
    1176:	0d c0       	rjmp	.+26     	; 0x1192 <vfprintf+0x272>
    1178:	fb 2d       	mov	r31, r11
    117a:	f4 60       	ori	r31, 0x04	; 4
    117c:	bf 2e       	mov	r11, r31
    117e:	09 c0       	rjmp	.+18     	; 0x1192 <vfprintf+0x272>
    1180:	34 fe       	sbrs	r3, 4
    1182:	0a c0       	rjmp	.+20     	; 0x1198 <vfprintf+0x278>
    1184:	29 2f       	mov	r18, r25
    1186:	26 60       	ori	r18, 0x06	; 6
    1188:	b2 2e       	mov	r11, r18
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <vfprintf+0x278>
    118c:	28 e0       	ldi	r18, 0x08	; 8
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	05 c0       	rjmp	.+10     	; 0x119c <vfprintf+0x27c>
    1192:	20 e1       	ldi	r18, 0x10	; 16
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	02 c0       	rjmp	.+4      	; 0x119c <vfprintf+0x27c>
    1198:	20 e1       	ldi	r18, 0x10	; 16
    119a:	32 e0       	ldi	r19, 0x02	; 2
    119c:	f8 01       	movw	r30, r16
    119e:	b7 fe       	sbrs	r11, 7
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <vfprintf+0x290>
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	0c 5f       	subi	r16, 0xFC	; 252
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <vfprintf+0x29c>
    11b0:	60 81       	ld	r22, Z
    11b2:	71 81       	ldd	r23, Z+1	; 0x01
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 5f       	subi	r16, 0xFE	; 254
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	a3 01       	movw	r20, r6
    11be:	0e 94 c3 09 	call	0x1386	; 0x1386 <__ultoa_invert>
    11c2:	88 2e       	mov	r8, r24
    11c4:	86 18       	sub	r8, r6
    11c6:	fb 2d       	mov	r31, r11
    11c8:	ff 77       	andi	r31, 0x7F	; 127
    11ca:	3f 2e       	mov	r3, r31
    11cc:	36 fe       	sbrs	r3, 6
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <vfprintf+0x2ca>
    11d0:	23 2d       	mov	r18, r3
    11d2:	2e 7f       	andi	r18, 0xFE	; 254
    11d4:	a2 2e       	mov	r10, r18
    11d6:	89 14       	cp	r8, r9
    11d8:	58 f4       	brcc	.+22     	; 0x11f0 <vfprintf+0x2d0>
    11da:	34 fe       	sbrs	r3, 4
    11dc:	0b c0       	rjmp	.+22     	; 0x11f4 <vfprintf+0x2d4>
    11de:	32 fc       	sbrc	r3, 2
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <vfprintf+0x2d4>
    11e2:	83 2d       	mov	r24, r3
    11e4:	8e 7e       	andi	r24, 0xEE	; 238
    11e6:	a8 2e       	mov	r10, r24
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <vfprintf+0x2d4>
    11ea:	b8 2c       	mov	r11, r8
    11ec:	a3 2c       	mov	r10, r3
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <vfprintf+0x2d6>
    11f0:	b8 2c       	mov	r11, r8
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <vfprintf+0x2d6>
    11f4:	b9 2c       	mov	r11, r9
    11f6:	a4 fe       	sbrs	r10, 4
    11f8:	0f c0       	rjmp	.+30     	; 0x1218 <vfprintf+0x2f8>
    11fa:	fe 01       	movw	r30, r28
    11fc:	e8 0d       	add	r30, r8
    11fe:	f1 1d       	adc	r31, r1
    1200:	80 81       	ld	r24, Z
    1202:	80 33       	cpi	r24, 0x30	; 48
    1204:	21 f4       	brne	.+8      	; 0x120e <vfprintf+0x2ee>
    1206:	9a 2d       	mov	r25, r10
    1208:	99 7e       	andi	r25, 0xE9	; 233
    120a:	a9 2e       	mov	r10, r25
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <vfprintf+0x300>
    120e:	a2 fe       	sbrs	r10, 2
    1210:	06 c0       	rjmp	.+12     	; 0x121e <vfprintf+0x2fe>
    1212:	b3 94       	inc	r11
    1214:	b3 94       	inc	r11
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <vfprintf+0x300>
    1218:	8a 2d       	mov	r24, r10
    121a:	86 78       	andi	r24, 0x86	; 134
    121c:	09 f0       	breq	.+2      	; 0x1220 <vfprintf+0x300>
    121e:	b3 94       	inc	r11
    1220:	a3 fc       	sbrc	r10, 3
    1222:	11 c0       	rjmp	.+34     	; 0x1246 <vfprintf+0x326>
    1224:	a0 fe       	sbrs	r10, 0
    1226:	06 c0       	rjmp	.+12     	; 0x1234 <vfprintf+0x314>
    1228:	b2 14       	cp	r11, r2
    122a:	88 f4       	brcc	.+34     	; 0x124e <vfprintf+0x32e>
    122c:	28 0c       	add	r2, r8
    122e:	92 2c       	mov	r9, r2
    1230:	9b 18       	sub	r9, r11
    1232:	0e c0       	rjmp	.+28     	; 0x1250 <vfprintf+0x330>
    1234:	b2 14       	cp	r11, r2
    1236:	60 f4       	brcc	.+24     	; 0x1250 <vfprintf+0x330>
    1238:	b6 01       	movw	r22, r12
    123a:	80 e2       	ldi	r24, 0x20	; 32
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
    1242:	b3 94       	inc	r11
    1244:	f7 cf       	rjmp	.-18     	; 0x1234 <vfprintf+0x314>
    1246:	b2 14       	cp	r11, r2
    1248:	18 f4       	brcc	.+6      	; 0x1250 <vfprintf+0x330>
    124a:	2b 18       	sub	r2, r11
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <vfprintf+0x332>
    124e:	98 2c       	mov	r9, r8
    1250:	21 2c       	mov	r2, r1
    1252:	a4 fe       	sbrs	r10, 4
    1254:	10 c0       	rjmp	.+32     	; 0x1276 <vfprintf+0x356>
    1256:	b6 01       	movw	r22, r12
    1258:	80 e3       	ldi	r24, 0x30	; 48
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
    1260:	a2 fe       	sbrs	r10, 2
    1262:	17 c0       	rjmp	.+46     	; 0x1292 <vfprintf+0x372>
    1264:	a1 fc       	sbrc	r10, 1
    1266:	03 c0       	rjmp	.+6      	; 0x126e <vfprintf+0x34e>
    1268:	88 e7       	ldi	r24, 0x78	; 120
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x352>
    126e:	88 e5       	ldi	r24, 0x58	; 88
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	b6 01       	movw	r22, r12
    1274:	0c c0       	rjmp	.+24     	; 0x128e <vfprintf+0x36e>
    1276:	8a 2d       	mov	r24, r10
    1278:	86 78       	andi	r24, 0x86	; 134
    127a:	59 f0       	breq	.+22     	; 0x1292 <vfprintf+0x372>
    127c:	a1 fe       	sbrs	r10, 1
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0x364>
    1280:	8b e2       	ldi	r24, 0x2B	; 43
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <vfprintf+0x366>
    1284:	80 e2       	ldi	r24, 0x20	; 32
    1286:	a7 fc       	sbrc	r10, 7
    1288:	8d e2       	ldi	r24, 0x2D	; 45
    128a:	b6 01       	movw	r22, r12
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
    1292:	89 14       	cp	r8, r9
    1294:	38 f4       	brcc	.+14     	; 0x12a4 <vfprintf+0x384>
    1296:	b6 01       	movw	r22, r12
    1298:	80 e3       	ldi	r24, 0x30	; 48
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
    12a0:	9a 94       	dec	r9
    12a2:	f7 cf       	rjmp	.-18     	; 0x1292 <vfprintf+0x372>
    12a4:	8a 94       	dec	r8
    12a6:	f3 01       	movw	r30, r6
    12a8:	e8 0d       	add	r30, r8
    12aa:	f1 1d       	adc	r31, r1
    12ac:	80 81       	ld	r24, Z
    12ae:	b6 01       	movw	r22, r12
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
    12b6:	81 10       	cpse	r8, r1
    12b8:	f5 cf       	rjmp	.-22     	; 0x12a4 <vfprintf+0x384>
    12ba:	22 20       	and	r2, r2
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <vfprintf+0x3a0>
    12be:	42 ce       	rjmp	.-892    	; 0xf44 <vfprintf+0x24>
    12c0:	b6 01       	movw	r22, r12
    12c2:	80 e2       	ldi	r24, 0x20	; 32
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 87 09 	call	0x130e	; 0x130e <fputc>
    12ca:	2a 94       	dec	r2
    12cc:	f6 cf       	rjmp	.-20     	; 0x12ba <vfprintf+0x39a>
    12ce:	f6 01       	movw	r30, r12
    12d0:	86 81       	ldd	r24, Z+6	; 0x06
    12d2:	97 81       	ldd	r25, Z+7	; 0x07
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <vfprintf+0x3ba>
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	9f ef       	ldi	r25, 0xFF	; 255
    12da:	2b 96       	adiw	r28, 0x0b	; 11
    12dc:	e2 e1       	ldi	r30, 0x12	; 18
    12de:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__epilogue_restores__>

000012e2 <strnlen_P>:
    12e2:	fc 01       	movw	r30, r24
    12e4:	05 90       	lpm	r0, Z+
    12e6:	61 50       	subi	r22, 0x01	; 1
    12e8:	70 40       	sbci	r23, 0x00	; 0
    12ea:	01 10       	cpse	r0, r1
    12ec:	d8 f7       	brcc	.-10     	; 0x12e4 <strnlen_P+0x2>
    12ee:	80 95       	com	r24
    12f0:	90 95       	com	r25
    12f2:	8e 0f       	add	r24, r30
    12f4:	9f 1f       	adc	r25, r31
    12f6:	08 95       	ret

000012f8 <strnlen>:
    12f8:	fc 01       	movw	r30, r24
    12fa:	61 50       	subi	r22, 0x01	; 1
    12fc:	70 40       	sbci	r23, 0x00	; 0
    12fe:	01 90       	ld	r0, Z+
    1300:	01 10       	cpse	r0, r1
    1302:	d8 f7       	brcc	.-10     	; 0x12fa <strnlen+0x2>
    1304:	80 95       	com	r24
    1306:	90 95       	com	r25
    1308:	8e 0f       	add	r24, r30
    130a:	9f 1f       	adc	r25, r31
    130c:	08 95       	ret

0000130e <fputc>:
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	fb 01       	movw	r30, r22
    1318:	23 81       	ldd	r18, Z+3	; 0x03
    131a:	21 fd       	sbrc	r18, 1
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <fputc+0x16>
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	9f ef       	ldi	r25, 0xFF	; 255
    1322:	2c c0       	rjmp	.+88     	; 0x137c <fputc+0x6e>
    1324:	22 ff       	sbrs	r18, 2
    1326:	16 c0       	rjmp	.+44     	; 0x1354 <fputc+0x46>
    1328:	46 81       	ldd	r20, Z+6	; 0x06
    132a:	57 81       	ldd	r21, Z+7	; 0x07
    132c:	24 81       	ldd	r18, Z+4	; 0x04
    132e:	35 81       	ldd	r19, Z+5	; 0x05
    1330:	42 17       	cp	r20, r18
    1332:	53 07       	cpc	r21, r19
    1334:	44 f4       	brge	.+16     	; 0x1346 <fputc+0x38>
    1336:	a0 81       	ld	r26, Z
    1338:	b1 81       	ldd	r27, Z+1	; 0x01
    133a:	9d 01       	movw	r18, r26
    133c:	2f 5f       	subi	r18, 0xFF	; 255
    133e:	3f 4f       	sbci	r19, 0xFF	; 255
    1340:	31 83       	std	Z+1, r19	; 0x01
    1342:	20 83       	st	Z, r18
    1344:	8c 93       	st	X, r24
    1346:	26 81       	ldd	r18, Z+6	; 0x06
    1348:	37 81       	ldd	r19, Z+7	; 0x07
    134a:	2f 5f       	subi	r18, 0xFF	; 255
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	37 83       	std	Z+7, r19	; 0x07
    1350:	26 83       	std	Z+6, r18	; 0x06
    1352:	14 c0       	rjmp	.+40     	; 0x137c <fputc+0x6e>
    1354:	8b 01       	movw	r16, r22
    1356:	ec 01       	movw	r28, r24
    1358:	fb 01       	movw	r30, r22
    135a:	00 84       	ldd	r0, Z+8	; 0x08
    135c:	f1 85       	ldd	r31, Z+9	; 0x09
    135e:	e0 2d       	mov	r30, r0
    1360:	09 95       	icall
    1362:	89 2b       	or	r24, r25
    1364:	e1 f6       	brne	.-72     	; 0x131e <fputc+0x10>
    1366:	d8 01       	movw	r26, r16
    1368:	16 96       	adiw	r26, 0x06	; 6
    136a:	8d 91       	ld	r24, X+
    136c:	9c 91       	ld	r25, X
    136e:	17 97       	sbiw	r26, 0x07	; 7
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	17 96       	adiw	r26, 0x07	; 7
    1374:	9c 93       	st	X, r25
    1376:	8e 93       	st	-X, r24
    1378:	16 97       	sbiw	r26, 0x06	; 6
    137a:	ce 01       	movw	r24, r28
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

00001386 <__ultoa_invert>:
    1386:	fa 01       	movw	r30, r20
    1388:	aa 27       	eor	r26, r26
    138a:	28 30       	cpi	r18, 0x08	; 8
    138c:	51 f1       	breq	.+84     	; 0x13e2 <__ultoa_invert+0x5c>
    138e:	20 31       	cpi	r18, 0x10	; 16
    1390:	81 f1       	breq	.+96     	; 0x13f2 <__ultoa_invert+0x6c>
    1392:	e8 94       	clt
    1394:	6f 93       	push	r22
    1396:	6e 7f       	andi	r22, 0xFE	; 254
    1398:	6e 5f       	subi	r22, 0xFE	; 254
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	8f 4f       	sbci	r24, 0xFF	; 255
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	af 4f       	sbci	r26, 0xFF	; 255
    13a2:	b1 e0       	ldi	r27, 0x01	; 1
    13a4:	3e d0       	rcall	.+124    	; 0x1422 <__ultoa_invert+0x9c>
    13a6:	b4 e0       	ldi	r27, 0x04	; 4
    13a8:	3c d0       	rcall	.+120    	; 0x1422 <__ultoa_invert+0x9c>
    13aa:	67 0f       	add	r22, r23
    13ac:	78 1f       	adc	r23, r24
    13ae:	89 1f       	adc	r24, r25
    13b0:	9a 1f       	adc	r25, r26
    13b2:	a1 1d       	adc	r26, r1
    13b4:	68 0f       	add	r22, r24
    13b6:	79 1f       	adc	r23, r25
    13b8:	8a 1f       	adc	r24, r26
    13ba:	91 1d       	adc	r25, r1
    13bc:	a1 1d       	adc	r26, r1
    13be:	6a 0f       	add	r22, r26
    13c0:	71 1d       	adc	r23, r1
    13c2:	81 1d       	adc	r24, r1
    13c4:	91 1d       	adc	r25, r1
    13c6:	a1 1d       	adc	r26, r1
    13c8:	20 d0       	rcall	.+64     	; 0x140a <__ultoa_invert+0x84>
    13ca:	09 f4       	brne	.+2      	; 0x13ce <__ultoa_invert+0x48>
    13cc:	68 94       	set
    13ce:	3f 91       	pop	r19
    13d0:	2a e0       	ldi	r18, 0x0A	; 10
    13d2:	26 9f       	mul	r18, r22
    13d4:	11 24       	eor	r1, r1
    13d6:	30 19       	sub	r19, r0
    13d8:	30 5d       	subi	r19, 0xD0	; 208
    13da:	31 93       	st	Z+, r19
    13dc:	de f6       	brtc	.-74     	; 0x1394 <__ultoa_invert+0xe>
    13de:	cf 01       	movw	r24, r30
    13e0:	08 95       	ret
    13e2:	46 2f       	mov	r20, r22
    13e4:	47 70       	andi	r20, 0x07	; 7
    13e6:	40 5d       	subi	r20, 0xD0	; 208
    13e8:	41 93       	st	Z+, r20
    13ea:	b3 e0       	ldi	r27, 0x03	; 3
    13ec:	0f d0       	rcall	.+30     	; 0x140c <__ultoa_invert+0x86>
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__ultoa_invert+0x5c>
    13f0:	f6 cf       	rjmp	.-20     	; 0x13de <__ultoa_invert+0x58>
    13f2:	46 2f       	mov	r20, r22
    13f4:	4f 70       	andi	r20, 0x0F	; 15
    13f6:	40 5d       	subi	r20, 0xD0	; 208
    13f8:	4a 33       	cpi	r20, 0x3A	; 58
    13fa:	18 f0       	brcs	.+6      	; 0x1402 <__ultoa_invert+0x7c>
    13fc:	49 5d       	subi	r20, 0xD9	; 217
    13fe:	31 fd       	sbrc	r19, 1
    1400:	40 52       	subi	r20, 0x20	; 32
    1402:	41 93       	st	Z+, r20
    1404:	02 d0       	rcall	.+4      	; 0x140a <__ultoa_invert+0x84>
    1406:	a9 f7       	brne	.-22     	; 0x13f2 <__ultoa_invert+0x6c>
    1408:	ea cf       	rjmp	.-44     	; 0x13de <__ultoa_invert+0x58>
    140a:	b4 e0       	ldi	r27, 0x04	; 4
    140c:	a6 95       	lsr	r26
    140e:	97 95       	ror	r25
    1410:	87 95       	ror	r24
    1412:	77 95       	ror	r23
    1414:	67 95       	ror	r22
    1416:	ba 95       	dec	r27
    1418:	c9 f7       	brne	.-14     	; 0x140c <__ultoa_invert+0x86>
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	61 05       	cpc	r22, r1
    141e:	71 05       	cpc	r23, r1
    1420:	08 95       	ret
    1422:	9b 01       	movw	r18, r22
    1424:	ac 01       	movw	r20, r24
    1426:	0a 2e       	mov	r0, r26
    1428:	06 94       	lsr	r0
    142a:	57 95       	ror	r21
    142c:	47 95       	ror	r20
    142e:	37 95       	ror	r19
    1430:	27 95       	ror	r18
    1432:	ba 95       	dec	r27
    1434:	c9 f7       	brne	.-14     	; 0x1428 <__ultoa_invert+0xa2>
    1436:	62 0f       	add	r22, r18
    1438:	73 1f       	adc	r23, r19
    143a:	84 1f       	adc	r24, r20
    143c:	95 1f       	adc	r25, r21
    143e:	a0 1d       	adc	r26, r0
    1440:	08 95       	ret

00001442 <__prologue_saves__>:
    1442:	2f 92       	push	r2
    1444:	3f 92       	push	r3
    1446:	4f 92       	push	r4
    1448:	5f 92       	push	r5
    144a:	6f 92       	push	r6
    144c:	7f 92       	push	r7
    144e:	8f 92       	push	r8
    1450:	9f 92       	push	r9
    1452:	af 92       	push	r10
    1454:	bf 92       	push	r11
    1456:	cf 92       	push	r12
    1458:	df 92       	push	r13
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	ca 1b       	sub	r28, r26
    146c:	db 0b       	sbc	r29, r27
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	09 94       	ijmp

0000147a <__epilogue_restores__>:
    147a:	2a 88       	ldd	r2, Y+18	; 0x12
    147c:	39 88       	ldd	r3, Y+17	; 0x11
    147e:	48 88       	ldd	r4, Y+16	; 0x10
    1480:	5f 84       	ldd	r5, Y+15	; 0x0f
    1482:	6e 84       	ldd	r6, Y+14	; 0x0e
    1484:	7d 84       	ldd	r7, Y+13	; 0x0d
    1486:	8c 84       	ldd	r8, Y+12	; 0x0c
    1488:	9b 84       	ldd	r9, Y+11	; 0x0b
    148a:	aa 84       	ldd	r10, Y+10	; 0x0a
    148c:	b9 84       	ldd	r11, Y+9	; 0x09
    148e:	c8 84       	ldd	r12, Y+8	; 0x08
    1490:	df 80       	ldd	r13, Y+7	; 0x07
    1492:	ee 80       	ldd	r14, Y+6	; 0x06
    1494:	fd 80       	ldd	r15, Y+5	; 0x05
    1496:	0c 81       	ldd	r16, Y+4	; 0x04
    1498:	1b 81       	ldd	r17, Y+3	; 0x03
    149a:	aa 81       	ldd	r26, Y+2	; 0x02
    149c:	b9 81       	ldd	r27, Y+1	; 0x01
    149e:	ce 0f       	add	r28, r30
    14a0:	d1 1d       	adc	r29, r1
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	ed 01       	movw	r28, r26
    14ae:	08 95       	ret

000014b0 <_exit>:
    14b0:	f8 94       	cli

000014b2 <__stop_program>:
    14b2:	ff cf       	rjmp	.-2      	; 0x14b2 <__stop_program>
